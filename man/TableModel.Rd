% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TableModel.R
\name{TableModel}
\alias{TableModel}
\title{TableModel Class}
\description{
The TableModel class represents a database table in the oRm framework. It manages
table structure, fields, relationships, and provides methods for interacting
with the database table.
}
\details{
TableModel is a core component of the oRm framework, responsible for:
\itemize{
  \item Defining table structure with columns and relationships
  \item Creating and managing database tables
  \item Providing an interface for CRUD operations on table records
  \item Managing relationships between different tables
}

Key features:
\itemize{
  \item Dynamic table creation and management
  \item Support for various column types and constraints
  \item Relationship definitions and querying
  \item Record creation and retrieval
}
}
\section{Methods}{

\describe{
  \item{\code{initialize(tablename, engine, ..., .data = list(), schema = NULL, .default_mode = "all")}}{Constructor for creating a new TableModel instance.}
  \item{\code{get_connection()}}{Retrieve the active database connection from the engine.}
  \item{\code{generate_sql_fields()}}{Generate SQL field definitions for table creation.}
  \item{\code{create_table(if_not_exists = TRUE, overwrite = FALSE, verbose = FALSE)}}{Create the associated table in the database.}
  \item{\code{record(..., .data = list())}}{Create a new Record object associated with this model.}
  \item{\code{read(..., .mode = NULL, .limit = NULL)}}{Read records from the table using dynamic filters. If `.mode` is NULL, uses `default_mode`.}
  \item{\code{relationship(rel_name, ...)}}{Query related records based on defined relationships.}
  \item{\code{print()}}{Print a concise summary of the model, including its fields.}
}
}

\examples{

## ------------------------------------------------
## Method `TableModel$drop_table`
## ------------------------------------------------

\dontrun{
# Drop the "users" table after confirmation
User$drop_table()

# Force drop without confirmation
User$drop_table(ask = FALSE)
}
}
\seealso{
\code{\link{Engine}}, \code{\link{Record}}, \code{\link{Column}}, \code{\link{ForeignKey}}

Engine::get_connection

[Record$relationship()]

[Engine$print()], [Record$print()].
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tablename}}{Fully qualified name of the table in the database.}

\item{\code{schema}}{Schema that namespaces the table; defaults to the engine's schema.}

\item{\code{engine}}{Engine instance providing connections and SQL dialect.}

\item{\code{fields}}{Named list of Column objects defining the table structure.}

\item{\code{relationships}}{Named list of Relationship objects linking to other models.}

\item{\code{default_mode}}{Default mode for reading records when `.mode` is NULL.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TableModel-new}{\code{TableModel$new()}}
\item \href{#method-TableModel-get_connection}{\code{TableModel$get_connection()}}
\item \href{#method-TableModel-set_schema}{\code{TableModel$set_schema()}}
\item \href{#method-TableModel-create_table}{\code{TableModel$create_table()}}
\item \href{#method-TableModel-drop_table}{\code{TableModel$drop_table()}}
\item \href{#method-TableModel-record}{\code{TableModel$record()}}
\item \href{#method-TableModel-tbl}{\code{TableModel$tbl()}}
\item \href{#method-TableModel-read}{\code{TableModel$read()}}
\item \href{#method-TableModel-relationship}{\code{TableModel$relationship()}}
\item \href{#method-TableModel-print}{\code{TableModel$print()}}
\item \href{#method-TableModel-clone}{\code{TableModel$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableModel-new"></a>}}
\if{latex}{\out{\hypertarget{method-TableModel-new}{}}}
\subsection{Method \code{new()}}{
Constructor for a new TableModel.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableModel$new(
  tablename,
  engine,
  ...,
  .data = list(),
  .schema = NULL,
  .default_mode = c("all", "one_or_none", "get", "data.frame", "tbl")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tablename}}{The name of the database table.}

\item{\code{engine}}{The Engine object for database connection.}

\item{\code{...}}{Column definitions.}

\item{\code{.data}}{a list of Column defintions}

\item{\code{.schema}}{Character. Schema to apply to the table name. Defaults to the engine's schema.}

\item{\code{.default_mode}}{Character. Default mode used when `read()` is called with `.mode` = NULL. Must be one of "all", "one_or_none", "get", "data.frame", or "tbl".}

\item{\code{schema}}{Optional schema name used to namespace the table.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableModel-get_connection"></a>}}
\if{latex}{\out{\hypertarget{method-TableModel-get_connection}{}}}
\subsection{Method \code{get_connection()}}{
Retrieve the active database connection from the engine.
Delegates to the associated engine and respects schema and
pooling settings.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableModel$get_connection(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Additional arguments passed to the engine's
`get_connection` method.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableModel-set_schema"></a>}}
\if{latex}{\out{\hypertarget{method-TableModel-set_schema}{}}}
\subsection{Method \code{set_schema()}}{
Update the schema for this model and re-qualify the table name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableModel$set_schema(schema)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{schema}}{Character. New schema name to apply.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The TableModel object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableModel-create_table"></a>}}
\if{latex}{\out{\hypertarget{method-TableModel-create_table}{}}}
\subsection{Method \code{create_table()}}{
Create the associated table in the database.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableModel$create_table(
  if_not_exists = TRUE,
  overwrite = FALSE,
  verbose = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{if_not_exists}}{Logical. If TRUE, only create the table if it doesn't exist. Default is TRUE.}

\item{\code{overwrite}}{Logical. If TRUE, drop the table if it exists and recreate it. Default is FALSE.}

\item{\code{verbose}}{Logical. If TRUE, return the SQL statement instead of executing it. Default is FALSE.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableModel-drop_table"></a>}}
\if{latex}{\out{\hypertarget{method-TableModel-drop_table}{}}}
\subsection{Method \code{drop_table()}}{
Drop the associated table from the database. Prompts for confirmation
by default if running interactively.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableModel$drop_table(ask = interactive())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ask}}{Logical. If TRUE (default in interactive sessions), prompts
the user for confirmation before dropping the table.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the result of `DBI::dbExecute()` if the table is dropped,
or `NULL` if the operation is canceled or skipped.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Drop the "users" table after confirmation
User$drop_table()

# Force drop without confirmation
User$drop_table(ask = FALSE)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableModel-record"></a>}}
\if{latex}{\out{\hypertarget{method-TableModel-record}{}}}
\subsection{Method \code{record()}}{
Create a new Record object with this model.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableModel$record(..., .data = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Named values to initialize the record's data.}

\item{\code{.data}}{a named list of field values.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableModel-tbl"></a>}}
\if{latex}{\out{\hypertarget{method-TableModel-tbl}{}}}
\subsection{Method \code{tbl()}}{
Generate a dbplyr tbl() object to be consumed by the model.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableModel$tbl()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableModel-read"></a>}}
\if{latex}{\out{\hypertarget{method-TableModel-read}{}}}
\subsection{Method \code{read()}}{
Read records using dynamic filters and return in the specified mode.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableModel$read(
  ...,
  .mode = NULL,
  .limit = 100,
  .offset = 0,
  .order_by = list()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Unquoted expressions for filtering.}

\item{\code{.mode}}{Mode for reading records. One of "all", "one_or_none", "get", "data.frame", or "tbl". If NULL, uses `default_mode`.
"data.frame" returns the raw result of `dplyr::collect()` rather than Record objects.
"tbl" returns the uncollected dbplyr table.}

\item{\code{.limit}}{Integer. Maximum number of records to return. Defaults to 100. NULL means no limit.
Positive values return the first N records, negative values return the last N records.}

\item{\code{.offset}}{Integer. Offset for pagination. Default is 0.}

\item{\code{.order_by}}{Unquoted expressions for ordering. Defaults to NULL (no order). Calls dplyr::arrange() so can take multiple args / desc()
Retrieve related records based on a defined relationship.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableModel-relationship"></a>}}
\if{latex}{\out{\hypertarget{method-TableModel-relationship}{}}}
\subsection{Method \code{relationship()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableModel$relationship(rel_name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rel_name}}{The name of the relationship to query.}

\item{\code{...}}{Additional arguments passed to the related model's read method.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method returns related records based on the relationship type:
- For 'belongs_to', 'owns', 'one_to_one', and 'many_to_one' relationships, it returns a single Record object or NULL.
- For 'one_to_many' and 'many_to_many' relationships, it returns a list of Record objects.

For per-record filtering based on existing data, use [Record$relationship()], which applies additional constraints.
}

\subsection{Returns}{
A single Record, a list of Records, or NULL, depending on the relationship type.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableModel-print"></a>}}
\if{latex}{\out{\hypertarget{method-TableModel-print}{}}}
\subsection{Method \code{print()}}{
Print a concise summary of the model, including the table name and
column names.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableModel$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Unused, present for compatibility.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The TableModel object, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableModel-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TableModel-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableModel$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
