% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BaseModel.R
\name{BaseModel}
\alias{BaseModel}
\title{Base Model Class}
\description{
The BaseModel class is the foundation for creating object-relational mappings in oRm.
It provides methods for table creation, record manipulation, and querying.
}
\details{
BaseModel is an R6 class that represents a database table. It manages the connection
to the database, defines the table structure, and provides methods for interacting
with the table data.
}
\section{Methods}{

\describe{
  \item{\code{initialize(tablename, engine, ...)}}{Constructor for creating a new BaseModel instance.}
  \item{\code{get_connection()}}{Returns the database connection from the engine.}
  \item{\code{get_fields_for_dbi()}}{Converts Column definitions to DBI-compatible format.}
  \item{\code{create_table()}}{Creates the table in the database.}
  \item{\code{print()}}{Prints a formatted representation of the model.}
  \item{\code{record(...)}}{Creates a new Record instance for this model.}
  \item{\code{delete_where(...)}}{Deletes rows from the table based on filter conditions.}
  \item{\code{read(..., mode)}}{Reads records from the table with optional filtering.}
}
}

\examples{
\dontrun{
# Create a new BaseModel
User <- BaseModel$new(
  tablename = "users",
  engine = my_engine,
  id = Column("INTEGER", key = TRUE),
  name = Column("VARCHAR")
)

# Create the table in the database
User$create_table()

# Insert a new record
User$record(id = 1, name = "Alice")$create()

# Read records
all_users <- User$read()
alice <- User$read(name == "Alice", mode = "one_or_none")

# Delete records
User$delete_where(name == "Alice")
}


## ------------------------------------------------
## Method `BaseModel$delete_where`
## ------------------------------------------------

\dontrun{
# Delete all rows where the 'age' column is greater than 18
my_model$delete_where(age > 18)

# Delete all rows where the 'name' column is 'Alice' and 'age' is less than 30
my_model$delete_where(name == "Alice", age < 30)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tablename}}{Character. The name of the database table.}

\item{\code{engine}}{An Engine object. Manages the database connection.}

\item{\code{fields}}{List. Contains Column objects defining the table structure.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-BaseModel-new}{\code{BaseModel$new()}}
\item \href{#method-BaseModel-get_connection}{\code{BaseModel$get_connection()}}
\item \href{#method-BaseModel-get_fields_for_dbi}{\code{BaseModel$get_fields_for_dbi()}}
\item \href{#method-BaseModel-create_table}{\code{BaseModel$create_table()}}
\item \href{#method-BaseModel-record}{\code{BaseModel$record()}}
\item \href{#method-BaseModel-read}{\code{BaseModel$read()}}
\item \href{#method-BaseModel-delete_where}{\code{BaseModel$delete_where()}}
\item \href{#method-BaseModel-print}{\code{BaseModel$print()}}
\item \href{#method-BaseModel-clone}{\code{BaseModel$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BaseModel-new"></a>}}
\if{latex}{\out{\hypertarget{method-BaseModel-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseModel$new(tablename, engine, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BaseModel-get_connection"></a>}}
\if{latex}{\out{\hypertarget{method-BaseModel-get_connection}{}}}
\subsection{Method \code{get_connection()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseModel$get_connection(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BaseModel-get_fields_for_dbi"></a>}}
\if{latex}{\out{\hypertarget{method-BaseModel-get_fields_for_dbi}{}}}
\subsection{Method \code{get_fields_for_dbi()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseModel$get_fields_for_dbi()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BaseModel-create_table"></a>}}
\if{latex}{\out{\hypertarget{method-BaseModel-create_table}{}}}
\subsection{Method \code{create_table()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseModel$create_table()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BaseModel-record"></a>}}
\if{latex}{\out{\hypertarget{method-BaseModel-record}{}}}
\subsection{Method \code{record()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseModel$record(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Named list of values to insert into the table.
The names should match the column names in the table.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The new record object.
Read records from the table using dynamic filters

Uses a `dbplyr`-based query to read records from the associated table.
You can specify filter conditions and return behavior, similar to SQLAlchemy.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BaseModel-read"></a>}}
\if{latex}{\out{\hypertarget{method-BaseModel-read}{}}}
\subsection{Method \code{read()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseModel$read(..., mode = c("all", "one_or_none", "get"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Filter expressions passed as unquoted arguments (e.g. age > 18, name == "Alice")}

\item{\code{mode}}{Character string: one of `"all"`, `"one_or_none"`, or `"get"`.
- `"all"` returns a list of `Record` objects (default)
- `"one_or_none"` returns a single `Record` or `NULL`
- `"get"` returns a single `Record` and errors if more or less than one match}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
One or more `Record` objects depending on the mode.
Delete rows matching a filter expression

This method deletes rows from the associated table based on the provided filter expressions.
It uses dplyr-style filter expressions to specify the rows to be deleted.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BaseModel-delete_where"></a>}}
\if{latex}{\out{\hypertarget{method-BaseModel-delete_where}{}}}
\subsection{Method \code{delete_where()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseModel$delete_where(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Unquoted dplyr-style filter expressions.
These expressions should be used to filter the rows to be deleted.
For example, `age > 18` will delete all rows where the `age` column is greater than 18.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The number of rows deleted.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Delete all rows where the 'age' column is greater than 18
my_model$delete_where(age > 18)

# Delete all rows where the 'name' column is 'Alice' and 'age' is less than 30
my_model$delete_where(name == "Alice", age < 30)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BaseModel-print"></a>}}
\if{latex}{\out{\hypertarget{method-BaseModel-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseModel$print(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BaseModel-clone"></a>}}
\if{latex}{\out{\hypertarget{method-BaseModel-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseModel$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
