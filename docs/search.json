[{"path":"https://kent-orr.github.io/oRm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 oRm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"set-up-the-engine","dir":"Articles","previous_headings":"","what":"Set up the Engine","title":"Get Started","text":"","code":"library(oRm) engine <- Engine$new(   drv = RSQLite::SQLite(),   dbname = \":memory:\",   persist = TRUE  # Optional for in-memory databases )"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"what-the-engine-does","dir":"Articles","previous_headings":"Set up the Engine","what":"What the Engine Does","title":"Get Started","text":"Creates manages DBI connection. Registers models can reference name relationship. Optionally uses pool connection pooling (set use_pool = TRUE). ‚Äôll rarely need interact connection directly, can: default, connections closed automatically operation unless persist = TRUE use_pool = TRUE.","code":"engine$get_connection() engine$list_tables() engine$execute(\"SELECT * FROM users\")"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"define-a-tablemodel","dir":"Articles","previous_headings":"","what":"Define a TableModel","title":"Get Started","text":"TableModels can created two ways. first calling TableModel constructor directly: , commonly, define model engine : second approach automatically registers model engine use relationships queries.","code":"Users <- TableModel$new(   \"users\",    engine,    id = Column(\"INTEGER\", primary_key = TRUE),   organization_id = ForeignKey(\"INTEGER\", references = 'organizations.id'),   name = Column(\"TEXT\"),   age = Column('INTEGER', default = 18) ) Organization <- engine$model(   \"organizations\",   id = Column(\"INTEGER\", primary_key = TRUE),   name = Column(\"TEXT\") )"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"what-tablemodels-do","dir":"Articles","previous_headings":"","what":"What TableModels Do","title":"Get Started","text":"TableModel instance gives access common operations table:","code":""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"create-the-table-in-your-database","dir":"Articles","previous_headings":"What TableModels Do","what":"Create the table in your database","title":"Get Started","text":"creates table based column definitions doesn‚Äôt already exist.","code":"Users$create_table() #> <TableModel> #>   Table: users #>   Fields: #>   üîë id               INTEGER   UNSPECIFIED #>      organization_id  INTEGER   UNSPECIFIED #>      name             TEXT      UNSPECIFIED #>      age              INTEGER   UNSPECIFIED Users$record(id = 1, name='John')$create() #> <Record>: 'users' #> id: 1 #> name: John Users$record(id = 2, name='Jane', age = 35)$create() #> <Record>: 'users' #> id: 2 #> name: Jane #> age: 35"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"read-rows-from-the-table","dir":"Articles","previous_headings":"What TableModels Do","what":"Read rows from the table","title":"Get Started","text":"read() method accepts dbplyr-style filter conditions ..., allowing flexible querying using R expressions. returns list Record objects, single record mode = \"get\" specified.","code":"all_users <- Users$read() young_users <- Users$read(age < 30) specific_user <- Users$read(id == 1, mode = \"get\")"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"what-records-do","dir":"Articles","previous_headings":"","what":"What Records Do","title":"Get Started","text":"row table represented Record. Records provide methods creating, updating, deleting, accessing individual rows.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"create-a-new-record","dir":"Articles","previous_headings":"What Records Do","what":"Create a new record","title":"Get Started","text":"","code":"Users$record(id = 3, organization_id = 1, name = \"Alice\")$create() #> <Record>: 'users' #> id: 3 #> organization_id: 1 #> name: Alice"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"update-a-record","dir":"Articles","previous_headings":"What Records Do","what":"Update a record","title":"Get Started","text":"","code":"alice <- Users$read(id == 3, mode = \"get\") alice$data$name <- \"Alicia\" alice$update()"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"delete-a-record","dir":"Articles","previous_headings":"What Records Do","what":"Delete a record","title":"Get Started","text":"","code":"alice$delete() #> NULL"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"access-record-data","dir":"Articles","previous_headings":"What Records Do","what":"Access record data","title":"Get Started","text":"","code":"print(alice$data$name) #> [1] \"Alicia\""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"defining-and-using-relationships","dir":"Articles","previous_headings":"","what":"Defining and Using Relationships","title":"Get Started","text":"can define relationships tables enable seamless navigation related records.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"define-a-relationship","dir":"Articles","previous_headings":"Defining and Using Relationships","what":"Define a relationship","title":"Get Started","text":"allows records Users access related Organization, records Organization access related Users.","code":"Users |> define_relationship(   local_key = \"organization_id\",   type = \"many_to_one\",   related_model = Organization,   related_key = \"id\",   ref = \"organization\",   backref = \"users\" ) #> <TableModel> #>   Table: users #>   Fields: #>   üîë id               INTEGER   UNSPECIFIED #>      organization_id  INTEGER   UNSPECIFIED #>      name             TEXT      UNSPECIFIED #>      age              INTEGER   UNSPECIFIED"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"accessing-relationships-through-a-record","dir":"Articles","previous_headings":"Defining and Using Relationships","what":"Accessing relationships through a Record","title":"Get Started","text":"defined Organization earlier, table nevver created. Let‚Äôs create table give Organization work .","code":"Organization$create_table() #> <TableModel> #>   Table: organizations #>   Fields: #>   üîë id          INTEGER   UNSPECIFIED #>      name        TEXT      UNSPECIFIED Organization$record(id = 1, name = \"Widgets, Inc\")$create() #> <Record>: 'organizations' #> id: 1 #> name: Widgets, Inc Users$record(id = 3, name = 'Alice', organization_id = 1)$create() #> <Record>: 'users' #> id: 3 #> name: Alice #> organization_id: 1 alice = Users$read(id == 3)[[1]] alice_org <- alice$relationship('organization') print(alice_org$data$name) #> [1] \"Widgets, Inc\""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"accessing-relationships-through-a-tablemodel","dir":"Articles","previous_headings":"Defining and Using Relationships","what":"Accessing relationships through a TableModel","title":"Get Started","text":"returns list user records age < 30 belong organization.","code":"young_orgs <- Organization$relationship(\"users\", age < 30) young_orgs #> [[1]] #> <Record>: 'users' #> id: 1 #> organization_id: NA #> name: John #> age: 18  #>  #> [[2]] #> <Record>: 'users' #> id: 3 #> organization_id: 1 #> name: Alice #> age: 18"},{"path":"https://kent-orr.github.io/oRm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kent Orr. Maintainer.","code":""},{"path":"https://kent-orr.github.io/oRm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Orr K (2025). oRm: Lightweight Object-Relational Mapper R. R package version 0.1.0, https://kent-orr.github.io/oRm/.","code":"@Manual{,   title = {oRm: Lightweight Object-Relational Mapper for R},   author = {Kent Orr},   year = {2025},   note = {R package version 0.1.0},   url = {https://kent-orr.github.io/oRm/}, }"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"orm-an-object-relational-mapping-orm-framework-for-r","dir":"","previous_headings":"","what":"Lightweight Object-Relational Mapper for R","title":"Lightweight Object-Relational Mapper for R","text":"oRm lightweight ORM R. Define models, insert data, query relationships without writing raw SQL.","code":""},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_-installation","dir":"","previous_headings":"","what":"üîß Installation","title":"Lightweight Object-Relational Mapper for R","text":"","code":"remotes::install_github(\"kent-orr/oRm\")"},{"path":[]},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_1-create-engine","dir":"","previous_headings":"üöÄ Quickstart","what":"1. Create Engine","title":"Lightweight Object-Relational Mapper for R","text":"","code":"library(oRm)  engine <- Engine$new(   drv = RSQLite::SQLite(),   dbname = \":memory:\",   persist = TRUE )"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_2-define-models","dir":"","previous_headings":"üöÄ Quickstart","what":"2. Define Models","title":"Lightweight Object-Relational Mapper for R","text":"","code":"User <- engine$model(   \"users\",   id = Column(\"INTEGER\", primary_key = TRUE, nullable = FALSE),   organization_id = ForeignKey(\"INTEGER\", references = \"organizations.id\"),   name = Column(\"TEXT\", nullable = FALSE),   age = Column(\"INTEGER\") )  Organization <- engine$model(   \"organizations\",   id = Column(\"INTEGER\", primary_key = TRUE, nullable = FALSE),   name = Column(\"TEXT\", nullable = FALSE) )  Organization$create_table() User$create_table()"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_3-add-relationship","dir":"","previous_headings":"üöÄ Quickstart","what":"3. Add Relationship","title":"Lightweight Object-Relational Mapper for R","text":"","code":"User |> define_relationship(   local_key = \"organization_id\",   type = \"belongs_to\",   related_model = Organization,   related_key = \"id\",   ref = \"organization\",   backref = \"users\" )"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_4-insert-records","dir":"","previous_headings":"üöÄ Quickstart","what":"4. Insert Records","title":"Lightweight Object-Relational Mapper for R","text":"","code":"Organization$record(id = 1L, name = \"Widgets, Inc\")$create() User$record(id = 1L, organization_id = 1L, name = \"Kent\", age = 34)$create() User$record(id = 2L, organization_id = 1L, name = \"Dylan\", age = 25)$create()"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_5-query-records","dir":"","previous_headings":"üöÄ Quickstart","what":"5. Query Records","title":"Lightweight Object-Relational Mapper for R","text":"","code":"kent <- User$read(id == 1, mode = \"get\") kent$data$name  org <- kent$relationship(\"organization\") org$data$name  org$relationship(\"users\")  # list of user records"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_6-crud-api","dir":"","previous_headings":"üöÄ Quickstart","what":"6. CRUD API","title":"Lightweight Object-Relational Mapper for R","text":"Early-stage project. Feedback welcome!","code":"u <- User$record(id = 5, name = \"hogan\") u$create() u <- User$read(id == 5) u$data$name <- \"Hogan\" u$update() u$delete()"},{"path":"https://kent-orr.github.io/oRm/reference/Column.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a basic column for a database table ‚Äî Column","title":"Define a basic column for a database table ‚Äî Column","text":"Define basic column database table","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a basic column for a database table ‚Äî Column","text":"","code":"Column(   type,   default = NULL,   primary_key = NULL,   nullable = NULL,   unique = NULL,   ... )"},{"path":"https://kent-orr.github.io/oRm/reference/Column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a basic column for a database table ‚Äî Column","text":"type SQL data type (e.g. \"INTEGER\", \"TEXT\", \"DATE\") default Optional default value (SQL default NULL) primary_key Logical, whether part primary key. NULL (default) means unspecified. nullable Logical, whether NULLs allowed. NULL (default) means unspecified. unique Logical, whether column UNIQUE constraint. NULL (default) means unspecified. ... Reserved extras like CHECK, COLLATE, etc.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a basic column for a database table ‚Äî Column","text":"Column object","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Column.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a basic column for a database table ‚Äî Column","text":"`primary_key`, `nullable`, `unique` set NULL, behavior left database system's defaults determined higher-level functions. allows flexible column definitions supports composite primary keys.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":null,"dir":"Reference","previous_headings":"","what":"Engine Class ‚Äî Engine","title":"Engine Class ‚Äî Engine","text":"Engine class core component oRm framework, responsible managing database connections providing methods interacting database. supports direct connections connection pooling, offering flexibility database resources managed. Key features: Manages database connections (single pooled) Provides methods executing SQL queries commands Allows creation TableModel objects ORM operations Supports persistent connections improved performance","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Engine Class ‚Äî Engine","text":"Engine$new() Engine$get_connection() Engine$close() Engine$list_tables() Engine$get_query() Engine$execute() Engine$model() Engine$clone()","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class ‚Äî Engine","text":"","code":"Engine$new(..., conn_args = list(), use_pool = FALSE, persist = FALSE)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class ‚Äî Engine","text":"... args passed DBI::dbConnect conn_args args passed DBI::dbConnect use_pool whether make use pool package connections engine persist whether keep connection open operations (default: FALSE) Get connection database","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class ‚Äî Engine","text":"","code":"Engine$get_connection()"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class ‚Äî Engine","text":"DBIConnection object pool object Close database connection pool list tables database connection Execute SQL query return result data.frame","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class ‚Äî Engine","text":"","code":"Engine$close()"},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class ‚Äî Engine","text":"","code":"Engine$list_tables()"},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class ‚Äî Engine","text":"","code":"Engine$get_query(sql)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class ‚Äî Engine","text":"sql SQL query","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class ‚Äî Engine","text":"data.frame Execute SQL query return number rows affected Create new TableModel object specified table","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class ‚Äî Engine","text":"","code":"Engine$execute(sql)"},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class ‚Äî Engine","text":"","code":"Engine$model(tablename, ..., .data = list())"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class ‚Äî Engine","text":"tablename Name table ... Additional arguments passed TableModel constructor .data named list arguments TableModel constructor","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Engine Class ‚Äî Engine","text":"objects class cloneable method.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class ‚Äî Engine","text":"","code":"Engine$clone(deep = FALSE)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class ‚Äî Engine","text":"deep Whether make deep clone.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/ForeignKey.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a foreign key column ‚Äî ForeignKey","title":"Define a foreign key column ‚Äî ForeignKey","text":"Define foreign key column","code":""},{"path":"https://kent-orr.github.io/oRm/reference/ForeignKey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a foreign key column ‚Äî ForeignKey","text":"","code":"ForeignKey(type, references, on_delete = NULL, on_update = NULL, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/ForeignKey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a foreign key column ‚Äî ForeignKey","text":"type SQL data type (e.g. \"INTEGER\") references Character. referenced table column (e.g. \"users.id\") on_delete Optional DELETE behavior (e.g. \"CASCADE\") on_update Optional UPDATE behavior ... Passed base Column (including nullable, primary_key, etc.)","code":""},{"path":"https://kent-orr.github.io/oRm/reference/ForeignKey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a foreign key column ‚Äî ForeignKey","text":"ForeignKey object","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":null,"dir":"Reference","previous_headings":"","what":"Record Class ‚Äî Record","title":"Record Class ‚Äî Record","text":"Record class represents single row database table. provides methods creating, updating, deleting individual records.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Record Class ‚Äî Record","text":"Record R6 class works conjunction TableModel class. Record instance corresponds single row database table represented associated TableModel. class provides methods CRUD (Create, Read, Update, Delete) operations individual records.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Record Class ‚Äî Record","text":"initialize(model, data = list()) Constructor creating new Record instance. create() Inserts record database. update() Updates record database. delete() Deletes record database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Record Class ‚Äî Record","text":"model TableModel object. Represents database table record belongs . data list. Contains data record, column names keys. relationships list. Contains relationships defined record's model.","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Record Class ‚Äî Record","text":"Record$new() Record$create() Record$update() Record$delete() Record$refresh() Record$relationship() Record$print() Record$clone()","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Record Class ‚Äî Record","text":"Initialize new Record instance.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class ‚Äî Record","text":"","code":"Record$new(model, ..., .data = list())"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class ‚Äî Record","text":"model TableModel object representing database table. ... Named arguments corresponding field values record. .data named list field values (alternative ...).","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class ‚Äî Record","text":"new Record instance.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-create-","dir":"Reference","previous_headings":"","what":"Method create()","title":"Record Class ‚Äî Record","text":"Insert record database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class ‚Äî Record","text":"","code":"Record$create()"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class ‚Äî Record","text":"Invisible NULL","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"Record Class ‚Äî Record","text":"Update record database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class ‚Äî Record","text":"","code":"Record$update(..., .data = list())"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class ‚Äî Record","text":"... Named arguments corresponding field values update. .data named list field values update (alternative ...).","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class ‚Äî Record","text":"Record instance (invisibly).","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-delete-","dir":"Reference","previous_headings":"","what":"Method delete()","title":"Record Class ‚Äî Record","text":"Delete record database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class ‚Äî Record","text":"","code":"Record$delete()"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class ‚Äî Record","text":"Invisible NULL","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-refresh-","dir":"Reference","previous_headings":"","what":"Method refresh()","title":"Record Class ‚Äî Record","text":"Refresh record database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class ‚Äî Record","text":"","code":"Record$refresh()"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class ‚Äî Record","text":"Record instance (invisibly).","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-relationship-","dir":"Reference","previous_headings":"","what":"Method relationship()","title":"Record Class ‚Äî Record","text":"Retrieve related records based defined relationship.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class ‚Äî Record","text":"","code":"Record$relationship(rel_name, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class ‚Äî Record","text":"rel_name name relationship query. ... Additional arguments passed related model's read method.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Record Class ‚Äî Record","text":"method returns related records based relationship type: - 'one_to_one' 'many_to_one' relationships, returns single Record object NULL. - 'one_to_many' 'many_to_many' relationships, returns list Record objects.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class ‚Äî Record","text":"single Record, list Records, NULL, depending relationship type.","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class ‚Äî Record","text":"","code":"Record$print()"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Record Class ‚Äî Record","text":"objects class cloneable method.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class ‚Äî Record","text":"","code":"Record$clone(deep = FALSE)"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class ‚Äî Record","text":"deep Whether make deep clone.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":null,"dir":"Reference","previous_headings":"","what":"TableModel Class ‚Äî TableModel","title":"TableModel Class ‚Äî TableModel","text":"TableModel class represents database table oRm framework. manages table structure, fields, relationships, provides methods interacting database table.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TableModel Class ‚Äî TableModel","text":"TableModel core component oRm framework, responsible : Defining table structure columns relationships Creating managing database tables Providing interface CRUD operations table records Managing relationships different tables Key features: Dynamic table creation management Support various column types constraints Relationship definitions querying Record creation retrieval","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"TableModel Class ‚Äî TableModel","text":"initialize(tablename, engine, ..., .data = list()) Constructor creating new TableModel instance. get_connection() Retrieve active database connection engine. generate_sql_fields() Generate SQL field definitions table creation. create_table(if_not_exists = TRUE, overwrite = FALSE, verbose = FALSE) Create associated table database. record(..., .data = list()) Create new Record object associated model. read(..., mode = c(\"\", \"one_or_none\", \"get\"), limit = NULL) Read records table using dynamic filters. relationship(rel_name, ...) Query related records based defined relationships. print() Print formatted overview model, including fields.","code":""},{"path":[]},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"TableModel Class ‚Äî TableModel","text":"TableModel$new() TableModel$get_connection() TableModel$generate_sql_fields() TableModel$create_table() TableModel$record() TableModel$read() TableModel$relationship() TableModel$print() TableModel$clone()","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"TableModel Class ‚Äî TableModel","text":"Constructor new TableModel.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class ‚Äî TableModel","text":"","code":"TableModel$new(tablename, engine, ..., .data = list())"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class ‚Äî TableModel","text":"tablename name database table. engine Engine object database connection. ... Column definitions. .data list Column defintions","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-get-connection-","dir":"Reference","previous_headings":"","what":"Method get_connection()","title":"TableModel Class ‚Äî TableModel","text":"Retrieve active database connection engine.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class ‚Äî TableModel","text":"","code":"TableModel$get_connection(...)"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-generate-sql-fields-","dir":"Reference","previous_headings":"","what":"Method generate_sql_fields()","title":"TableModel Class ‚Äî TableModel","text":"Generate DBI-compatible field definitions Column ForeignKey objects, including constraints SQL clause generation.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class ‚Äî TableModel","text":"","code":"TableModel$generate_sql_fields()"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-create-table-","dir":"Reference","previous_headings":"","what":"Method create_table()","title":"TableModel Class ‚Äî TableModel","text":"Create associated table database. Create associated table database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class ‚Äî TableModel","text":"","code":"TableModel$create_table(   if_not_exists = TRUE,   overwrite = FALSE,   verbose = FALSE )"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class ‚Äî TableModel","text":"if_not_exists Logical. TRUE, create table exist. Default TRUE. overwrite Logical. TRUE, drop table exists recreate . Default FALSE. verbose Logical. TRUE, return SQL statement instead executing . Default FALSE.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-record-","dir":"Reference","previous_headings":"","what":"Method record()","title":"TableModel Class ‚Äî TableModel","text":"Create new Record object model.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class ‚Äî TableModel","text":"","code":"TableModel$record(..., .data = list())"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class ‚Äî TableModel","text":"... Named values initialize record's data. .data named list field values.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-read-","dir":"Reference","previous_headings":"","what":"Method read()","title":"TableModel Class ‚Äî TableModel","text":"Read records using dynamic filters return specified mode.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class ‚Äî TableModel","text":"","code":"TableModel$read(..., mode = c(\"all\", \"one_or_none\", \"get\"), limit = NULL)"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class ‚Äî TableModel","text":"... Unquoted expressions filtering. mode One \"\", \"one_or_none\", \"get\". limit Integer. Maximum number records return. NULL (default) means limit. Positive values return first N records, negative values return last N records.","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class ‚Äî TableModel","text":"","code":"TableModel$relationship(rel_name, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"TableModel Class ‚Äî TableModel","text":"Print formatted overview model, including fields.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class ‚Äî TableModel","text":"","code":"TableModel$print(...)"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"TableModel Class ‚Äî TableModel","text":"objects class cloneable method.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class ‚Äî TableModel","text":"","code":"TableModel$clone(deep = FALSE)"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class ‚Äî TableModel","text":"deep Whether make deep clone.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/define_relationship.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a relationship between two models ‚Äî define_relationship","title":"Define a relationship between two models ‚Äî define_relationship","text":"function establishes relationship two models ORM system. creates Relationship object adds local model's relationships. backref specified, also creates reverse relationship related model. uses R6 classes, models modified place need reassigned.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/define_relationship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a relationship between two models ‚Äî define_relationship","text":"","code":"define_relationship(   local_model,   local_key,   type = c(\"one_to_one\", \"one_to_many\", \"many_to_one\", \"many_to_many\"),   related_model,   related_key,   ref = NULL,   backref = NULL )"},{"path":"https://kent-orr.github.io/oRm/reference/define_relationship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a relationship between two models ‚Äî define_relationship","text":"local_model model owns relationship. local_key key local model relates foreign key related model. type type relationship. Must one 'one_to_one', 'one_to_many', 'many_to_one', 'many_to_many'. related_model model related . related_key key related model local_key relates . ref name use relationship local model. NULL, defaults lowercase name related model. backref name use reverse relationship related model. NULL, defaults lowercase name local model. FALSE, reverse relationship created.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/define_relationship.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a relationship between two models ‚Äî define_relationship","text":"Invisibly returns local_model (although model modified place).","code":""},{"path":"https://kent-orr.github.io/oRm/reference/define_relationship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a relationship between two models ‚Äî define_relationship","text":"","code":"if (FALSE) { # \\dontrun{ # Set up models User <- engine$model(\"users\", id = Column(\"INTEGER\", primary_key = TRUE)) Post <- engine$model(\"posts\",                       id = Column(\"INTEGER\", primary_key = TRUE),                       user_id = Column(\"INTEGER\"))  # Define a one-to-many relationship from User to Post define_relationship(User, \"id\", \"one_to_many\", Post, \"user_id\",                      ref = \"posts\", backref = \"user\")  # Now User has a 'posts' relationship and Post has a 'user' relationship  # Create some sample data user <- User$record(id = 1)$create() post <- Post$record(id = 1, user_id = 1)$create()  # Use the relationships user_posts <- user$relationship('posts') post_user <- post$relationship('user')  print(user_posts)  # Should show the post print(post_user)   # Should show the user } # }"},{"path":"https://kent-orr.github.io/oRm/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! ‚Äî hello","title":"Hello, World! ‚Äî hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! ‚Äî hello","text":"","code":"hello()"},{"path":"https://kent-orr.github.io/oRm/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! ‚Äî hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""}]
