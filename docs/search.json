[{"path":"https://kent-orr.github.io/oRm/AGENTS.html","id":null,"dir":"","previous_headings":"","what":"AGENTS Guidelines","title":"AGENTS Guidelines","text":"Use 4 spaces indentation; avoid tabs. Prefer snake_case functions variables; R6 class names use PascalCase. Document public functions roxygen2 comments. Write commit messages imperative mood keep concise. edit .Rd automatically generated Roxygen2. Avoid dialect-specific checks core R6 classes (Engine, TableModel, Record); place dialect logic dedicated dialect files. Increase development version DESCRIPTION commit unless codex prompt explicitly states otherwise. test dependencies fairly large. attempt run testthat. . ├── AGENTS.md ├── DESCRIPTION ├── LICENSE ├── LICENSE.md ├── NAMESPACE ├── R │ ├── Column.R │ ├── Dialect-mysql.R │ ├── Dialect-postgres.R │ ├── Dialect.R │ ├── Dialect-sqlite.R │ ├── Engine.R │ ├── Record.R │ ├── Relationship.R │ └── TableModel.R ├── README.md ├── tests │ ├── testthat │ └── testthat.R └── vignettes ├── get_started.Rmd ├── using-engine.Rmd ├── using-records.Rmd ├── using-relationships.Rmd ├── using-tablemodels.Rmd ├── why_oRm.Rmd └── with_shiny.Rmd","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE Contribution Guidelines","title":"CLAUDE Contribution Guidelines","text":"document provides guidelines AI assistants (specifically Claude) contributing oRm package.","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"package-overview","dir":"","previous_headings":"","what":"Package Overview","title":"CLAUDE Contribution Guidelines","text":"oRm lightweight Object-Relational Mapper (ORM) R simplifies database interactions R6-based framework. package provides declarative model definitions, relationship management, CRUD operations without requiring raw SQL.","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"core-architecture","dir":"","previous_headings":"Package Overview","what":"Core Architecture","title":"CLAUDE Contribution Guidelines","text":"Engine: Database connection manager multi-dialect support (PostgreSQL, SQLite, MySQL) TableModel: Table representation schema management CRUD interface Record: Individual row operations transaction support Column/ForeignKey: Field definitions constraints relationships Dialect System: Database-specific SQL generation","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"code-style","dir":"","previous_headings":"Development Guidelines","what":"Code Style","title":"CLAUDE Contribution Guidelines","text":"Use 4 spaces indentation; avoid tabs Prefer snake_case functions variables Use PascalCase R6 class names (Engine, TableModel, Record) Document public functions roxygen2 comments Follow existing patterns error handling validation","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"file-organization","dir":"","previous_headings":"Development Guidelines","what":"File Organization","title":"CLAUDE Contribution Guidelines","text":"Core classes R/ directory descriptive names Dialect-specific implementations separate files (Dialect-*.R) Tests organized testthat/ corresponding test files Vignettes provide comprehensive usage examples","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"documentation-standards","dir":"","previous_headings":"Development Guidelines","what":"Documentation Standards","title":"CLAUDE Contribution Guidelines","text":"public methods must roxygen2 documentation Include @description, @param, @return, @examples sections Use @seealso cross-reference related functions Document field attributes R6 classes using @field Never edit .Rd files - auto-generated roxygen2","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"testing-considerations","dir":"","previous_headings":"Development Guidelines","what":"Testing Considerations","title":"CLAUDE Contribution Guidelines","text":"attempt run testthat - test dependencies large adding features, consider test structure don’t execute Follow existing test patterns tests/testthat/ Test files mirror source file names (test-Engine.R, etc.)","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"database-dialect-support","dir":"","previous_headings":"Development Guidelines","what":"Database Dialect Support","title":"CLAUDE Contribution Guidelines","text":"CRITICAL: Dialect-specific functions must NEVER included core classes (Engine, TableModel, Record, Relationship, etc.). dialect-specific behavior must use custom method dispatcher.","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"method-dispatch-system","dir":"","previous_headings":"Development Guidelines > Database Dialect Support","what":"Method Dispatch System","title":"CLAUDE Contribution Guidelines","text":"oRm uses custom method dispatcher (dispatch_method() Dialect.R:39) dialect-specific behavior:","code":"# Correct - uses method dispatch qualify(engine, tablename, schema) set_schema(engine, schema) flush(engine, table, data, con, commit)  # Incorrect - adding dialect logic to core classes if (engine$dialect == \"postgres\") { ... }"},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"implementing-dialect-specific-functions","dir":"","previous_headings":"Development Guidelines > Database Dialect Support","what":"Implementing Dialect-Specific Functions","title":"CLAUDE Contribution Guidelines","text":"extending database support: - Create new dialect file following Dialect-*.R pattern - Implement dialect-specific methods using naming convention: function_name.dialect_name - Provide default implementations .default suffix - Add dialect detection logic Engine$detect_dialect() - Use dispatch_method() dialect-dependent operations","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"available-dialect-functions","dir":"","previous_headings":"Development Guidelines > Database Dialect Support","what":"Available Dialect Functions","title":"CLAUDE Contribution Guidelines","text":"Core dialect functions use method dispatch: - qualify() / qualify.dialect - Schema-aware table name qualification - set_schema() / set_schema.dialect - Set database schema context - flush() / flush.dialect - Insert records RETURNING support - ensure_schema_exists() / ensure_schema_exists.dialect - Create schema needed - create_schema() / create_schema.dialect - Explicit schema creation","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"example-implementation","dir":"","previous_headings":"Development Guidelines > Database Dialect Support","what":"Example Implementation","title":"CLAUDE Contribution Guidelines","text":"","code":"# In Dialect-postgres.R flush.postgres <- function(x, table, data, con, commit = TRUE, ...) {     # PostgreSQL-specific implementation with RETURNING }  # In Dialect-sqlite.R   flush.sqlite <- function(x, table, data, con, commit = TRUE, ...) {     # SQLite-specific implementation }  # Default fallback in Dialect.R flush.default <- function(x, table, data, con, commit = TRUE, ...) {     # Generic implementation }"},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"transaction-handling","dir":"","previous_headings":"Development Guidelines","what":"Transaction Handling","title":"CLAUDE Contribution Guidelines","text":"Respect existing transaction state via engine$get_transaction_state() Use .Engine() transaction blocks Default auto-commit active transaction Handle rollbacks gracefully appropriate error messages","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"relationship-management","dir":"","previous_headings":"Development Guidelines","what":"Relationship Management","title":"CLAUDE Contribution Guidelines","text":"Support standard relationship types: belongs_to, one_to_many, many_to_many Maintain bidirectional relationship references (ref/backref) Ensure proper foreign key constraint handling Use appropriate read modes based relationship cardinality","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"commit-messages","dir":"","previous_headings":"Git Workflow","what":"Commit Messages","title":"CLAUDE Contribution Guidelines","text":"Use imperative mood (e.g., “Add support ”, “Fix bug ”, “Update documentation”) Keep first line 50 characters Provide detailed explanation body needed Reference issues #issue-number","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"branch-strategy","dir":"","previous_headings":"Git Workflow","what":"Branch Strategy","title":"CLAUDE Contribution Guidelines","text":"Work feature branches main Use descriptive branch names (feature/add-mysql-support, fix/transaction-rollback) Keep commits focused atomic","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"error-handling","dir":"","previous_headings":"Common Patterns","what":"Error Handling","title":"CLAUDE Contribution Guidelines","text":"","code":"if (missing(required_param)) {   stop(\"Required parameter 'required_param' must be provided\") }  tryCatch({   # operation }, error = function(e) {   # cleanup and re-throw   stop(\"Operation failed: \", e$message) })"},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"r6-method-documentation","dir":"","previous_headings":"Common Patterns","what":"R6 Method Documentation","title":"CLAUDE Contribution Guidelines","text":"","code":"#' @description #' Brief description of what the method does #' @param param_name Parameter description #' @return What the method returns #' @examples #' \\dontrun{ #' # Example usage #' } method_name = function(param_name) {   # implementation }"},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"database-operations","dir":"","previous_headings":"Common Patterns","what":"Database Operations","title":"CLAUDE Contribution Guidelines","text":"Always use parameterized queries DBI::dbQuoteLiteral() Quote identifiers DBI::dbQuoteIdentifier() Handle schema qualification consistently Respect connection pooling persistence settings","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"required-imports","dir":"","previous_headings":"Package Dependencies","what":"Required Imports","title":"CLAUDE Contribution Guidelines","text":"DBI: Database connectivity dbplyr: SQL generation dplyr integration dplyr: Data manipulation R6: Object-oriented framework pool: Connection pooling rlang: Non-standard evaluation","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"suggested-dependencies","dir":"","previous_headings":"Package Dependencies","what":"Suggested Dependencies","title":"CLAUDE Contribution Guidelines","text":"testthat: Testing framework knitr/rmarkdown: Documentation stevedore: Docker testing charlatan: Test data generation","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"contribution-checklist","dir":"","previous_headings":"","what":"Contribution Checklist","title":"CLAUDE Contribution Guidelines","text":"submitting changes: Follow code style guidelines (4 spaces, snake_case, etc.) Add roxygen2 documentation public methods Update existing documentation behavior changes Consider test cases (structure, execution) Check proper error handling validation Ensure database dialect compatibility Verify transaction handling appropriate Write clear, imperative commit messages Update relevant vignettes adding major features","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"CLAUDE Contribution Guidelines","text":"Package source: https://github.com/kent-orr/oRm Documentation: https://kent-orr.github.io/oRm/ Bug reports: https://github.com/kent-orr/oRm/issues R6 documentation: https://r6.r-lib.org/ DBI documentation: https://dbi.r-dbi.org/","code":""},{"path":"https://kent-orr.github.io/oRm/CLAUDE.html","id":"do-nots","dir":"","previous_headings":"","what":"Do Nots","title":"CLAUDE Contribution Guidelines","text":"spend time editing .Rd docs, ar eprogrammataicalyl generated roxygen","code":""},{"path":"https://kent-orr.github.io/oRm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 oRm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":null,"dir":"","previous_headings":"","what":"oRm Testing Checklist","title":"oRm Testing Checklist","text":"document outlines testing gaps identified oRm package provides checklist implementing comprehensive test coverage.","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"mysql-dialect-testing","dir":"","previous_headings":"🔴 Critical Gaps (High Priority)","what":"MySQL Dialect Testing","title":"oRm Testing Checklist","text":"Create test-Dialect-mysql.R - Currently missing entirely Test flush.mysql() function LAST_INSERT_ID() behavior Test qualify.mysql() schema qualification Test set_schema.mysql() USE statement (Note: PostgreSQL schema switching disabled) Test MySQL connection initialization dialect detection Test MySQL-specific data types (BIGINT, TINYINT, etc.) Test MySQL auto-increment behavior Test MySQL transaction handling commit/rollback","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"foreignkey-class-testing","dir":"","previous_headings":"🔴 Critical Gaps (High Priority)","what":"ForeignKey Class Testing","title":"oRm Testing Checklist","text":"Create comprehensive ForeignKey tests Test ForeignKey constructor various reference formats Test reference string parsing (“table.column” format) Test ForeignKey constraint validation Test integration TableModel constraint generation Test ForeignKey different data types Test ForeignKey NULL values cascading options","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"error-handling--edge-cases","dir":"","previous_headings":"🟡 Important Gaps (Medium Priority)","what":"Error Handling & Edge Cases","title":"oRm Testing Checklist","text":"Network timeout scenarios Authentication failures Database server unavailability Invalid connection parameters Operations non-existent schemas Schema permission restrictions Reserved keyword schema names Schema naming conflicts Foreign key constraint violations UNIQUE constraint violations NULL constraint violations CHECK constraint violations Invalid data type coercion Boundary values numeric types Oversized string values Invalid date/time formats","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"transaction-handling","dir":"","previous_headings":"🟡 Important Gaps (Medium Priority)","what":"Transaction Handling","title":"oRm Testing Checklist","text":"Nested .Engine() blocks Savepoint creation rollback Transaction state management nesting Long-running transaction timeouts Deadlock detection handling Mixed commit/rollback operations Transaction isolation level testing Multi-user scenarios Concurrent read/write operations Connection pool concurrent load","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"relationship-edge-cases","dir":"","previous_headings":"🟡 Important Gaps (Medium Priority)","what":"Relationship Edge Cases","title":"oRm Testing Checklist","text":"Self-referencing relationships (User -> User) Circular relationship dependencies Multi-hop relationship traversal Automatic junction table creation Junction table naming conventions Junction table additional fields Many--many record deletion cascades Updating foreign key references Orphaned record handling Relationship consistency validation","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"schema-management-advanced-cases","dir":"","previous_headings":"🟢 Nice-to-Have (Lower Priority)","what":"Schema Management Advanced Cases","title":"oRm Testing Checklist","text":"Foreign keys across different schemas Relationships models different schemas Schema migration existing data Testing restricted schema access Schema creation permission failures Read-schema access scenarios","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"performance--scalability","dir":"","previous_headings":"🟢 Nice-to-Have (Lower Priority)","what":"Performance & Scalability","title":"oRm Testing Checklist","text":"Bulk insert performance (1000+ records) Memory usage large result sets Query optimization complex filters large offset values (> 10000) Negative limit boundary conditions Pagination complex clauses Performance degradation deep pagination","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"connection--pool-management","dir":"","previous_headings":"🟢 Nice-to-Have (Lower Priority)","what":"Connection & Pool Management","title":"oRm Testing Checklist","text":"Different pool sizes (1, 5, 20+ connections) Pool timeout settings Pool validation intervals Stale connection detection Connection recovery network issues Pool exhaustion scenarios Graceful pool shutdown","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"data-integrity","dir":"","previous_headings":"🟢 Nice-to-Have (Lower Priority)","what":"Data Integrity","title":"oRm Testing Checklist","text":"NULL values primary keys (fail) NULL values foreign keys NULL values default functions NULL value coercion across data types Function-based defaults high load Default value consistency across transactions Default values complex data types UNIQUE constraint across multiple columns Complex CHECK constraint validation Constraint naming error messages","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"integration--compatibility","dir":"","previous_headings":"🟢 Nice-to-Have (Lower Priority)","what":"Integration & Compatibility","title":"oRm Testing Checklist","text":"Complex dplyr operations tbl mode dplyr joins oRm relationships dplyr aggregations grouping Performance comparison: dplyr vs oRm methods Complex method chaining scenarios Error propagation chains Memory management long chains Different versions DBI drivers dbplyr version compatibility pool package version compatibility","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"security--validation","dir":"","previous_headings":"🟢 Nice-to-Have (Lower Priority)","what":"Security & Validation","title":"oRm Testing Checklist","text":"Malicious input clauses SQL injection attempts field names Parameterization user inputs Special characters table/column names Script injection attempts Unicode special character handling Binary data handling Operations limited database permissions Read-user scenarios Schema-restricted access testing","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"testing-implementation-priority","dir":"","previous_headings":"","what":"Testing Implementation Priority","title":"oRm Testing Checklist","text":"Phase 1: Create missing MySQL dialect tests ForeignKey tests Phase 2: Implement comprehensive error handling tests Phase 3: Add complex transaction relationship scenarios Phase 4: Performance, security, edge case testing","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"notes-for-test-implementation","dir":"","previous_headings":"","what":"Notes for Test Implementation","title":"oRm Testing Checklist","text":"Use testthat::skip_if_not_installed() database-specific tests Mock external dependencies appropriate Use withr::defer() proper test cleanup Test success failure scenarios feature Include performance benchmarks critical operations Document database-specific setup requirements","code":""},{"path":"https://kent-orr.github.io/oRm/TESTING_CHECKLIST.html","id":"test-coverage-goals","dir":"","previous_headings":"","what":"Test Coverage Goals","title":"oRm Testing Checklist","text":"Minimum: 90% line coverage across R files Target: 95% line coverage comprehensive edge cases Critical: 100% coverage security-sensitive functions (SQL generation, parameterization)","code":""},{"path":"https://kent-orr.github.io/oRm/articles/developing-dialects.html","id":"dialect-dispatch","dir":"Articles","previous_headings":"","what":"Dialect dispatch","title":"Developing Dialects","text":"Dialects selected context object calling helper. internal dispatch_method() looks function naming pattern method.dialect falls back method.default dialect-specific method defined. dialect typically stored Engine propagates associated TableModel Record objects.","code":"# simplified dispatch dispatch_method <- function(x, method, ...) {     dialect <- get_dialect(x)     method_name <- paste(method, dialect, sep = '.')     method_fn <- get0(method_name, mode = \"function\")     if (is.null(method_fn)) {         method_fn <- get0(paste0(method, '.default'), mode = \"function\")     }     method_fn(x, ...) }"},{"path":"https://kent-orr.github.io/oRm/articles/developing-dialects.html","id":"required-methods","dir":"Articles","previous_headings":"","what":"Required methods","title":"Developing Dialects","text":"register new dialect, create file like R/Dialect-mydialect.R implement methods using dispatch naming convention. following functions commonly needed: flush.mydialect(x, table, data, con, commit = TRUE, ...): Insert row return inserted data identifiers. qualify.mydialect(x, tablename, .schema): Qualify table name schema supported. set_schema.mydialect(x, .schema): Switch current schema connection. check_schema_exists.mydialect(x, .schema): (Optional) Check whether schema exists. function called dispatch_method() working engines, models, records declare dialect.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/developing-dialects.html","id":"documenting-methods","dir":"Articles","previous_headings":"","what":"Documenting methods","title":"Developing Dialects","text":"Default implementations include roxygen block @rdname create base manual page. Dialect-specific variants add notes @describeIn, appends subsection page keeps everything discoverable via ? F1. Running devtools::document() adding dialect updates shared documentation new sections appear automatically.","code":"#' @rdname check_schema_exists check_schema_exists.default <- function(x, .schema) {     # ... }  #' @describeIn check_schema_exists Check if a schema exists for PostgreSQL. check_schema_exists.postgres <- function(x, .schema) {     # ... }"},{"path":"https://kent-orr.github.io/oRm/articles/developing-dialects.html","id":"submitting-a-dialect","dir":"Articles","previous_headings":"","what":"Submitting a dialect","title":"Developing Dialects","text":"implementing functions, ensure new dialect file listed Collate: field DESCRIPTION export user-facing helpers. Dialects peer-reviewed pull requests—include tests demonstrating inserts, schema qualification, behaviour specific backend.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"set-up-the-engine","dir":"Articles","previous_headings":"","what":"Set up the Engine","title":"Get Started","text":"","code":"library(oRm) engine <- Engine$new(   drv = RSQLite::SQLite(),   dbname = \":memory:\",   persist = TRUE  # Optional for in-memory databases )"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"what-the-engine-does","dir":"Articles","previous_headings":"Set up the Engine","what":"What the Engine Does","title":"Get Started","text":"Creates manages DBI connection. Registers models can reference name relationship. Optionally uses pool connection pooling (set use_pool = TRUE). ’ll rarely need interact connection directly, can: default, connections closed automatically operation unless persist = TRUE use_pool = TRUE.","code":"engine$get_connection() engine$list_tables() engine$execute(\"SELECT * FROM users\")"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"define-a-tablemodel","dir":"Articles","previous_headings":"","what":"Define a TableModel","title":"Get Started","text":"TableModels can created two ways. first calling TableModel constructor directly: can also set column default using SQL expression wrapping dbplyr::sql(), prevents value quoted string: , commonly, define model engine : second approach automatically registers model engine use relationships queries.","code":"Users <- TableModel$new(   \"users\",   engine,   id = Column(\"INTEGER\", primary_key = TRUE),   organization_id = Column(\"INTEGER\"),   name = Column(\"TEXT\"),   age = Column('INTEGER', default = 18) ) # Simple Users model without complex defaults Users <- TableModel$new(     \"users\",     engine,     id = Column(\"INTEGER\", primary_key = TRUE),     organization_id = Column(\"INTEGER\"),     name = Column(\"TEXT\"),     age = Column(\"INTEGER\") ) Organization <- engine$model(   \"organizations\",   id = Column(\"INTEGER\", primary_key = TRUE),   name = Column(\"TEXT\") )"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"what-tablemodels-do","dir":"Articles","previous_headings":"","what":"What TableModels Do","title":"Get Started","text":"TableModel instance gives access common operations table:","code":""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"create-the-table-in-your-database","dir":"Articles","previous_headings":"What TableModels Do","what":"Create the table in your database","title":"Get Started","text":"creates table based column definitions doesn’t already exist.","code":"Users$create_table() #> <TableModel> #> Table: users #> Columns: id, organization_id, name, age Users$record(id = 1, name='John')$create() Users$record(id = 2, name='Jane', age = 35)$create()"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"read-rows-from-the-table","dir":"Articles","previous_headings":"What TableModels Do","what":"Read rows from the table","title":"Get Started","text":"read() method accepts dbplyr-style filter conditions ..., allowing flexible querying using R expressions. returns list Record objects, single record .mode = \"get\" specified.","code":"all_users <- Users$read() young_users <- Users$read(age < 30) specific_user <- Users$read(id == 1, .mode = \"get\")"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"what-records-do","dir":"Articles","previous_headings":"","what":"What Records Do","title":"Get Started","text":"row table represented Record. Records provide methods creating, updating, deleting, accessing individual rows.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"create-a-new-record","dir":"Articles","previous_headings":"What Records Do","what":"Create a new record","title":"Get Started","text":"","code":"Users$record(id = 3, organization_id = 1, name = \"Alice\")$create()"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"update-a-record","dir":"Articles","previous_headings":"What Records Do","what":"Update a record","title":"Get Started","text":"","code":"alice <- Users$read(id == 3, .mode = \"get\") alice$data$name <- \"Alicia\" alice$update()"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"delete-a-record","dir":"Articles","previous_headings":"What Records Do","what":"Delete a record","title":"Get Started","text":"","code":"alice$delete() #> NULL"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"access-record-data","dir":"Articles","previous_headings":"What Records Do","what":"Access record data","title":"Get Started","text":"","code":"print(alice$data$name) #> [1] \"Alicia\""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"defining-and-using-relationships","dir":"Articles","previous_headings":"","what":"Defining and Using Relationships","title":"Get Started","text":"can define relationships tables enable seamless navigation related records.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"define-a-relationship","dir":"Articles","previous_headings":"Defining and Using Relationships","what":"Define a relationship","title":"Get Started","text":"allows records Users access related Organization, records Organization access related Users.","code":"define_relationship(   Users,   local_key = \"organization_id\",   type = \"many_to_one\",   related_model = Organization,   related_key = \"id\",   ref = \"organization\",   backref = \"users\" ) #> <TableModel> #> Table: users #> Columns: id, organization_id, name, age"},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"accessing-relationships-through-a-record","dir":"Articles","previous_headings":"Defining and Using Relationships","what":"Accessing relationships through a Record","title":"Get Started","text":"defined Organization earlier, table nevver created. Let’s create table give Organization work .","code":"Organization$create_table() #> <TableModel> #> Table: organizations #> Columns: id, name Organization$record(id = 1, name = \"Widgets, Inc\")$create() Users$record(id = 3, name = 'Alice', organization_id = 1)$create() alice = Users$read(id == 3, .mode='get') alice_org <- alice$relationship('organization') print(alice_org$data$name) #> [1] \"Widgets, Inc\""},{"path":"https://kent-orr.github.io/oRm/articles/get_started.html","id":"accessing-relationships-through-a-tablemodel","dir":"Articles","previous_headings":"Defining and Using Relationships","what":"Accessing relationships through a TableModel","title":"Get Started","text":"returns list user records age < 30 belong organization.","code":"young_orgs <- Organization$relationship(\"users\", age < 30) young_orgs #> NULL"},{"path":"https://kent-orr.github.io/oRm/articles/using-engine.html","id":"creating-an-engine","dir":"Articles","previous_headings":"","what":"Creating an Engine","title":"Using Engine","text":"creating Engine, two additional arguments worth knowing: persist = TRUE: Keeps connection open operations like model() execute(). required using -memory SQLite database, otherwise data lost calls. use_pool = TRUE: Enables connection pooling (via pool package), improves performance environments like Shiny reusing open connections across sessions.","code":"library(oRm)  engine <- Engine$new(   drv = RSQLite::SQLite(),   dbname = \":memory:\",   persist = TRUE )  engine #> <Engine> #>   dialect: sqlite, schema: NULL, connected: FALSE"},{"path":"https://kent-orr.github.io/oRm/articles/using-engine.html","id":"common-methods","dir":"Articles","previous_headings":"","what":"Common Methods","title":"Using Engine","text":"full API documented Engine reference page, commonly used methods: model() Creates TableModel object Engine. See TableModel vignette get_connection() Returns underlying DBI connection. can use directly raw SQL dplyr::tbl() custom queries. execute(sql) lightweight wrapper around DBI::dbExecute() using Engine’s connection. get_query(sql) Executes query returns results data.frame using DBI::dbGetQuery().","code":"# Run a raw SQL statement engine$execute(\"CREATE TABLE things (id INTEGER PRIMARY KEY, name TEXT)\")  # Retrieve a result df <- engine$get_query(\"SELECT * FROM things\")"},{"path":"https://kent-orr.github.io/oRm/articles/using-engine.html","id":"using-with-engine","dir":"Articles","previous_headings":"","what":"Using with.Engine","title":"Using Engine","text":".Engine S3 method managing transaction state. allows run code within database transaction, error occurs execution, automatically roll back transaction. provides safeguard partial writes inconsistent states. ’re familiar Python’s sqlalchemy, usage feel familiar. can also choose manually commit roll back transactions. gives full control error handling: approach helps ensure data remains sync database state. part transaction fails, .Engine() automatically clean alert meaningful error.","code":"with(engine, {   user = Users$record(name = \"John Doe\")   user$create() }) with(engine, {   user = Users$record(name = \"Jane Doe\")   tryCatch({     user$create()   }, error = function(e) {     print(paste(\"An error occurred:\", e$message))     rollback()   })   commit() }, auto_commit = FALSE)"},{"path":"https://kent-orr.github.io/oRm/articles/using-engine.html","id":"dialects","dir":"Articles","previous_headings":"","what":"Dialects","title":"Using Engine","text":"Engines also store dialect database connect . used translate SQL statements correct syntax specific database backend. Different databases handle data types, operators, functions slightly different ways. oRm’s dialect system isn’t exhaustive, covers key differences affect features like flushing value-returning inserts. example: - PostgreSQL supports RETURNING * fetch inserted rows immediately. - SQLite support RETURNING, oRm falls back using last_insert_rowid(). dialect-specific behaviors handled automatically, code can stay consistent regardless database use.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/using-records.html","id":"create","dir":"Articles","previous_headings":"","what":"Create","title":"Using Records","text":"Create comes single argument, flush_record, boolean indicating whether flush record database creation. default NULL check transaction state flush record ’s transaction, wait commit ’s transaction. can course overridden. point might ‘SERIAL’ column table automatically increments id , column timestamp function called database . record flushed, return updated record (dialect supports ). interactive use, probably want flush every creation whole record work creation. loop transaction ’re making modification, may concerned flushing.","code":"english$create(flush_record = NULL)"},{"path":"https://kent-orr.github.io/oRm/articles/using-records.html","id":"update","dir":"Articles","previous_headings":"","what":"Update","title":"Using Records","text":"Let’s say want change grade_average English 85 90. record data (aka row data) stored record$data. can modify call update() method save changes database. alternatively, can give named arguments update() method one go. need give named list programmatic updates?","code":"english$data$grade_average = 90 english$update() Classes$read(id==11, .mode='get') #> <Record>: 'classes' #> grade_average: 90 #> id: 11 #> subject: English #> teacher_id: 2 english$update(grade_average = 91) Classes$read(id==11, .mode='get') #> <Record>: 'classes' #> grade_average: 91 #> id: 11 #> subject: English #> teacher_id: 2 e_data = list(grade_average = 92, teacher_id = 1) english$update(.data = e_data) Classes$read(id==11, .mode='get') #> <Record>: 'classes' #> grade_average: 92 #> id: 11 #> subject: English #> teacher_id: 1"},{"path":"https://kent-orr.github.io/oRm/articles/using-records.html","id":"delete","dir":"Articles","previous_headings":"","what":"Delete","title":"Using Records","text":"delete record, call delete() method Record object.","code":"english$delete() #> NULL Classes$read(!subject %in% c(\"Math\", \"Science\"), .mode='one_or_none') #> NULL"},{"path":"https://kent-orr.github.io/oRm/articles/using-relationships.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Using Relationships","text":"Let’s create Students Classes tables populate dummy data. Okay, old days, oRm might use dplyr view related fields tables via joins. ’ll look students class id=1 beutiful join finds students class 1. Ready kinds analysis now. ’re trying read analyze data, make change? need apply curve grades class 1? can splice things dplyr style hope get joins right, , rely previously described relationship get necessary records apply curve. possible types ‘one_to_many’, ‘one_to_one’, ‘many_to_many’, ‘many_to_one’. ref backref arguments used define relationship two models. ’ll use values call related records. Let’s see action: look reverse: can also apply filtering related records:","code":"library(oRm) engine <- Engine$new(   drv = RSQLite::SQLite(),   dbname = \":memory:\",   persist = TRUE ) Classes <- engine$model(     tablename = \"classes\",      id = Column('INTEGER', primary_key = TRUE),     subject = Column('TEXT'),     teacher_id = ForeignKey('INTEGER', references = 'teachers.id') ) Classes$create_table(overwrite=T) #> <TableModel> #> Table: classes #> Columns: id, subject, teacher_id  set.seed(100) Students <- engine$model(     tablename = \"students\",      id = Column('INTEGER', primary_key = TRUE),     name = Column('TEXT'),     class_id = ForeignKey('INTEGER', references = 'classes.id'),     grade = Column('NUMBER', default = \\(x) round(rnorm(1, 85, 5))) ) Students$create_table(overwrite=T) #> <TableModel> #> Table: students #> Columns: id, name, class_id, grade   for (i in 1:10) {     Classes$record(         id = i,          subject = ifelse(i %% 2 == 0, \"Math\", \"Science\"),         teacher_id = ifelse(i %% 2 == 0, 1, 2)     )$create() } Classes$read(.limit = 3) #> [[1]] #> <Record>: 'classes' #> id: 1 #> subject: Science #> teacher_id: 2  #>  #> [[2]] #> <Record>: 'classes' #> id: 2 #> subject: Math #> teacher_id: 1  #>  #> [[3]] #> <Record>: 'classes' #> id: 3 #> subject: Science #> teacher_id: 2  student_names <- c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\", \"Frank\", \"Grace\", \"Henry\", \"Ivy\", \"Jack\") for (i in 1:100) {     Students$record(         id = i,          name = paste(sample(student_names, 1), i),         class_id = sample(1:10, 1)     )$create() } Students$read(.limit = 3) #> [[1]] #> <Record>: 'students' #> grade: 86 #> id: 1 #> name: Jack 1 #> class_id: 7  #>  #> [[2]] #> <Record>: 'students' #> grade: 89 #> id: 2 #> name: Charlie 2 #> class_id: 9  #>  #> [[3]] #> <Record>: 'students' #> grade: 82 #> id: 3 #> name: Grace 3 #> class_id: 6 class_tbl <- Classes$tbl() student_tbl <- Students$tbl()  dplyr::left_join(class_tbl, student_tbl, by = c(id = \"class_id\")) |>     dplyr::filter(id == 1) |>     dplyr::collect() #> # A tibble: 7 × 6 #>      id subject teacher_id  id.y name       grade #>   <int> <chr>        <int> <int> <chr>      <int> #> 1     1 Science          2    11 Grace 11      82 #> 2     1 Science          2    30 Henry 30      86 #> 3     1 Science          2    41 Bob 41        82 #> 4     1 Science          2    61 Grace 61      84 #> 5     1 Science          2    64 Charlie 64    92 #> 6     1 Science          2    81 Charlie 81    87 #> 7     1 Science          2    89 Diana 89      83 define_relationship(     local_model = Classes,      local_key = 'id',     type = 'one_to_many',     related_model = Students,      related_key = 'class_id',     ref = 'students',     backref = 'class' ) #> <TableModel> #> Table: classes #> Columns: id, subject, teacher_id class1 = Classes$read(id == 1, .mode='get') class1_students = class1$relationship('students') class1_students |> sapply(\\(x) paste(     x$data$name, round(x$data$grade), sep = ': ')) #> [1] \"Grace 11: 82\"   \"Henry 30: 86\"   \"Bob 41: 82\"     \"Grace 61: 84\"   #> [5] \"Charlie 64: 92\" \"Charlie 81: 87\" \"Diana 89: 83\"  # let's go ahead and apply that curve to the grades for (student in class1_students) {     student$data$grade <- student$data$grade + 3     student$update() }  class1_students |> sapply(\\(x) paste(     x$data$name, round(x$data$grade), sep = ': ')) #> [1] \"Grace 11: 85\"   \"Henry 30: 89\"   \"Bob 41: 85\"     \"Grace 61: 87\"   #> [5] \"Charlie 64: 95\" \"Charlie 81: 90\" \"Diana 89: 86\" class1_students[[1]]$relationship('class') #> <Record>: 'classes' #> id: 1 #> subject: Science #> teacher_id: 2 class1$relationship('students', grade < 87) #> [[1]] #> <Record>: 'students' #> grade: 85 #> id: 11 #> name: Grace 11 #> class_id: 1  #>  #> [[2]] #> <Record>: 'students' #> grade: 85 #> id: 41 #> name: Bob 41 #> class_id: 1  #>  #> [[3]] #> <Record>: 'students' #> grade: 86 #> id: 89 #> name: Diana 89 #> class_id: 1"},{"path":"https://kent-orr.github.io/oRm/articles/using-relationships.html","id":"nested-relationships","dir":"Articles","previous_headings":"","what":"Nested Relationships","title":"Using Relationships","text":"Let’s expand complexity creating new table teachers. handful teachers, may multipe classes take care , ’ll assign teachers multiple classes. two relationships need deine now: ‘one_to_many’ Teachers TeacherAssignments, ‘many_to_one’ TeacherAssignments Classes. can now traverse Teachers -> TeacherAssignments -> Classes back . demonstrate , ’ll make deck info cards teacher showing class students class. Diana 10 89 Alice 37 79 Diana 40 78 Diana 45 90 Grace 46 88 Bob 65 82 Grace 71 94 Henry 74 87 Alice 79 80 Alice 87 82 Diana 8 88 Charlie 33 84 Jack 44 78 Charlie 51 89 Diana 56 88 Alice 57 79 Jack 75 83 Frank 13 84 Bob 27 87 Ivy 72 84 Eve 80 80 Bob 82 78 Bob 92 89 Diana 98 84","code":"set.seed(100) Teachers <- engine$model(     tablename = \"teachers\",      id = Column('INTEGER', primary_key = TRUE),     name = Column('TEXT') ) Teachers$create_table(overwrite=T) #> <TableModel> #> Table: teachers #> Columns: id, name  for (i in 1:3) {     Teachers$record(id = i)$create() } Teachers$read()[[1]] #> <Record>: 'teachers' #> id: 1 #> name: NA   set.seed(100) TeacherAssignments <- engine$model(     tablename = \"teacher_assignments\",      id = Column('INTEGER', primary_key = TRUE),     teacher_id = ForeignKey('INTEGER', references = 'teachers.id'),     class_id = ForeignKey('INTEGER', references = 'classes.id') )  TeacherAssignments$create_table(overwrite=T) #> <TableModel> #> Table: teacher_assignments #> Columns: id, teacher_id, class_id  for (i in 1:length(Classes$read())) {     TeacherAssignments$record(         teacher_id = sample(1:3, 1),         class_id = i     )$create() }  TeacherAssignments$read()[1] #> [[1]] #> <Record>: 'teacher_assignments' #> id: 1 #> teacher_id: 2 #> class_id: 1 define_relationship(     local_model = Teachers,      local_key = 'id',     type = 'one_to_many',     related_model = TeacherAssignments,     related_key = 'teacher_id',     ref = 'teacher_assignments',     backref = 'teacher' ) #> <TableModel> #> Table: teachers #> Columns: id, name  define_relationship(     local_model = TeacherAssignments,      local_key = 'class_id',     type ='one_to_one',     related_model = Classes,     related_key = 'id',     ref = 'class',     backref = 'teacher_assignment' ) #> <TableModel> #> Table: teacher_assignments #> Columns: id, teacher_id, class_id teacher <- Teachers$read(id == 3, .mode='get')  # teacher$relationship('teacher_assignments') |> #     lapply(\\(x) x$relationship('class')) |> #     lapply(\\(x) x$relationship('students'))  bslib::card(     bslib::card_title(teacher$data$name),     bslib::card_body(         teacher$relationship('teacher_assignments') |>             lapply(\\(x) {                 class = x$relationship('class')                 bslib::card(max_height = '800px',                     bslib::card_title(class$data$subject),                     bslib::card_body(                         class$relationship('students') |>                             lapply(\\(x) htmltools::tags$p(paste(x$data$name, round(x$data$grade))))                                          )                 )             })     ) )"},{"path":"https://kent-orr.github.io/oRm/articles/using-tablemodels.html","id":"creating-tables","dir":"Articles","previous_headings":"","what":"Creating Tables","title":"Using TableModels","text":"can define TableModel TableModel$new(), common (convenient) way Engine using engine$model(): tablename becomes actual table name database. Named arguments define column either Column ForeignKey.","code":"Classes <- engine$model(     tablename = \"classes\",      id = Column('INTEGER', primary_key = TRUE),     subject = Column('TEXT'),     teacher_id = ForeignKey('INTEGER', references = 'teachers.id'),     grade_average = Column('NUMBER', default = \\(x) rnorm(1, 80, 10)) ) Classes$create_table() #> <TableModel> #> Table: classes #> Columns: id, subject, teacher_id, grade_average"},{"path":"https://kent-orr.github.io/oRm/articles/using-tablemodels.html","id":"columns","dir":"Articles","previous_headings":"Creating Tables","what":"Columns","title":"Using TableModels","text":"Column() ForeignKey() S3 constructors used define field metadata. database dialect (e.g., SQLite, Postgres) affects model translated SQL. Default values can literal values functions. ’s function, evaluated record created value provided. ForeignKey() special kind Column() links another table, using format “other_table.column_name”. can also pass raw SQL strings named options via … inject additional behavior CREATE TABLE statement. supply default value, can either character string function. string, ’s used default value. function, ’s called arguments result used default value. R function gets called TableModel creating record value provided. ForeignKey special case Column specifies foreign key relationship another table. Typically provide target single string using references = \"other_table.column\" syntax, though ref_table ref_column can also supplied separately needed.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/using-tablemodels.html","id":"reading-data","dir":"Articles","previous_headings":"","what":"Reading Data","title":"Using TableModels","text":"R CRUD happens TableModel level. hood, read method making use dbplyr dot args given read method directly supplied dplyr::filter() call. allows use familiar dplyr syntax retrieve records want work . ’re going create entries table, skipping section right now. want skip ahead come back, can jump using records section.","code":"# Let's make some classes for (i in 1:10) {     Classes$record(         id = i,          subject = ifelse(i %% 2 == 0, \"Math\", \"Science\"),         teacher_id = ifelse(i %% 2 == 0, 1, 2)     )$create() }  # Now let's look at some classes # calling with no args returns all records classes = Classes$read() print(length(classes)) #> [1] 10  # calling with a filter argument returns records matching the filter classes = Classes$read(subject == \"Math\") print(length(classes)) #> [1] 5  Classes$read(id == 2, .mode='get') #> <Record>: 'classes' #> grade_average: 82.5531705484526 #> id: 2 #> subject: Math #> teacher_id: 1"},{"path":"https://kent-orr.github.io/oRm/articles/using-tablemodels.html","id":"modes","dir":"Articles","previous_headings":"Reading Data","what":"Modes","title":"Using TableModels","text":"five modes reading data: ‘get’, ‘one_or_none’, ‘’, ‘data.frame’, ‘tbl’. ‘get’ return single record matched UID. matching record found, throw error. ‘one_or_none’ return single record. matching record found, return NULL instead throwing error. ‘’ return records match filter. big difference ‘get’ two get return object , two always return list NULL. allows code enforce data integrity ’re trying get single record, whether filter returns one multiple records.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/using-tablemodels.html","id":"sorting-returned-records","dir":"Articles","previous_headings":"Reading Data","what":"Sorting Returned Records","title":"Using TableModels","text":"Ordering returned records can achieved .order_by argument. ’s list unquoted column names get applied dplyr::arrange(). works arrange call, work well, includes designation desc() sort descending order.","code":"Classes$read(.order_by = c(subject, desc(id))) |>     sapply(function(x) {paste(x$data$subject, x$data$id)}) |>     suppressWarnings() # sqlite is noisy about arrange and limits #>  [1] \"Math 10\"   \"Math 8\"    \"Math 6\"    \"Math 4\"    \"Math 2\"    \"Science 9\" #>  [7] \"Science 7\" \"Science 5\" \"Science 3\" \"Science 1\""},{"path":"https://kent-orr.github.io/oRm/articles/using-tablemodels.html","id":"offsets-and-limits","dir":"Articles","previous_headings":"Reading Data","what":"Offsets and Limits","title":"Using TableModels","text":"read method also accepts offset limit argument. arguments used control pagination results. Unlike dataframe, printing list records truncate neatly, filter records return. default limt 100 records ensure don’t get much data . can set NULL override. Used conjunction, can effectivly paginate records.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/why_oRm.html","id":"using-dbplyr-and-dbi-to-manage-your-database","dir":"Articles","previous_headings":"","what":"Using dbplyr and DBI to manage your database","title":"Why oRm","text":"point, ’re mixing DBI calls, dplyr. ’s fine need build interface, reuse logic across functions, update record based user input. Suddenly ’re juggling SQL strings, dplyr pipelines, column names hand. let’s see action: One team members actually put measurement wrong, ’s 8.15, 15.8. fix record database? ’re either hardcoding pasting together SQL, ’re overwriting wntire table. best ’s DRY, can make code harder understand maintain. worst, can delete whole database single operation recourse. ’s row-level object work , ’re always re-identifying rows raw conditions.","code":"library(DBI) library(dplyr) library(dbplyr)  con <- dbConnect(RSQLite::SQLite(), \":memory:\")  # Create the table using a data.frame and dbWriteTable initial_data <- tibble::tibble(   observer_id = 1L,   plant_id = 101L,   measurement_date = as.Date(\"2025-07-30\"),   measurement_value = 14.2 )  dbWriteTable(con, \"measurements\", initial_data)  # ===== table setup complete =====  # Add another row later new_row <- tibble::tibble(   observer_id = 2L,   plant_id = 102L,   measurement_date = as.Date(\"2025-07-31\"),   measurement_value = 15.8 )  DBI::dbAppendTable(con, \"measurements\", new_row) #> [1] 1  # View the table tbl(con, \"measurements\") |>   filter(observer_id == 2) |>   collect() #> # A tibble: 1 × 4 #>   observer_id plant_id measurement_date measurement_value #>         <int>    <int>            <dbl>             <dbl> #> 1           2      102            20300              15.8 # You have to find the row and update it manually using SQL dbExecute(con, \"   UPDATE measurements   SET measurement_value = 8.15   WHERE observer_id = 2 \") #> [1] 1 dbGetQuery(con, 'SELECT * FROM measurements WHERE observer_id = 2') #>   observer_id plant_id measurement_date measurement_value #> 1           2      102            20300              8.15  # Or if we stay are strinct about staying in dbplyr, we might do something like this:  new_tab = tbl(con, \"measurements\") |>     mutate(         measurement_value  = case_when(             observer_id == 2 ~ 8.15,             TRUE ~ measurement_value         )     ) |>     collect()  dbWriteTable(con, \"measurements\", new_tab, overwrite = TRUE)"},{"path":"https://kent-orr.github.io/oRm/articles/why_oRm.html","id":"using-orm-to-manage-your-database","dir":"Articles","previous_headings":"","what":"Using oRm to Manage Your Database","title":"Why oRm","text":"now let’s use oRm manage database. ’re going define table schema enter first observations. oh, yikes. Person 2 put measurement wrong. let’s correct . time around ’re working one single record, safer precise using raw SQL. ’re also performing update instead re-writing whole table.","code":"library(oRm)  engine <- Engine$new(   drv = RSQLite::SQLite(),   dbname = \":memory:\",   persist = TRUE )  Measurement <- engine$model(   \"measurements\",   id = Column(\"INTEGER\", primary_key = TRUE),   observer_id = Column(\"INTEGER\"),   plant_id = ForeignKey(\"INTEGER\", references = 'plants.id'),  # we'll define this table shortly    measurement_date = Column(\"DATE\"),   measurement_value = Column(\"REAL\") )  Measurement$create_table() #> <TableModel> #> Table: measurements #> Columns: id, observer_id, plant_id, measurement_date, measurement_value  # ===== table setup complete =====  # Add a few observations m1 = Measurement$record(   observer_id = 1,   plant_id = 101,   measurement_date = as.Date(\"2025-07-30\"),   measurement_value = 14.2 )$create()  m2 = Measurement$record(   observer_id = 1,   plant_id = 101,   measurement_date = as.Date(\"2025-08-15\"),   measurement_value = 16.0 )$create()  m3 = Measurement$record(   observer_id = 2,   plant_id = 102,   measurement_date = as.Date(\"2025-07-31\"),   measurement_value = 15.8 )$create()  m1 #> <Record>: 'measurements' #> id: 1 #> observer_id: 1 #> plant_id: 101 #> measurement_date: 20299 #> measurement_value: 14.2 p2 = Measurement$read(observer_id == 2, .mode='get') p2$update(measurement_value = 8.15) p2 #> <Record>: 'measurements' #> id: 3 #> observer_id: 2 #> plant_id: 102 #> measurement_date: 20300 #> measurement_value: 8.15"},{"path":"https://kent-orr.github.io/oRm/articles/why_oRm.html","id":"relationships","dir":"Articles","previous_headings":"","what":"Relationships","title":"Why oRm","text":"far ’ve looked object models, great managing single record, records loops. relationships records? Let’s say lookup table plants. looking closely Measurements table, might noticed designated foreign key Plants table. ’ll make use relationship now. point, database aware relationship Plants Measurements. oRm . ’ll now model relationship two tables oRm objects use. ’ve made mapping, can find related measurements specific plant. can look specific relationship filtering","code":"Plants <- engine$model(     \"plants\",     id = Column(\"INTEGER\", primary_key = TRUE),     plant_type = Column(\"TEXT\") ) Plants$create_table() #> <TableModel> #> Table: plants #> Columns: id, plant_type  # and we'll make a handful of plant records Plants$record(id = 101, plant_type = \"pea\")$create() Plants$record(id = 102, plant_type = \"potato\")$create() Plants$record(id = 103, plant_type = \"pea\")$create() define_relationship(     local_model = Plants,     local_key = \"id\",     type = \"one_to_many\",     related_model = Measurement,     related_key = \"plant_id\",     ref = \"measurements\",     backref = \"plant\" ) #> <TableModel> #> Table: plants #> Columns: id, plant_type p101 = Plants$read(id == 101, .mode='get') p101$relationship('measurements') #> [[1]] #> <Record>: 'measurements' #> id: 1 #> observer_id: 1 #> plant_id: 101 #> measurement_date: 20299 #> measurement_value: 14.2  #>  #> [[2]] #> <Record>: 'measurements' #> id: 2 #> observer_id: 1 #> plant_id: 101 #> measurement_date: 20315 #> measurement_value: 16 p101$relationship('measurements', measurement_value < 15.0) #> [[1]] #> <Record>: 'measurements' #> id: 1 #> observer_id: 1 #> plant_id: 101 #> measurement_date: 20299 #> measurement_value: 14.2"},{"path":"https://kent-orr.github.io/oRm/articles/why_oRm.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Why oRm","text":"vignette, ’ve seen oRm can simplify process inserting, updating, querying data structured models instead scattered SQL repeated joins. ’ve also seen relationships records can declared reused throughout code, making easier write clean, maintainable tools. just beginning. don’t create tables oRm use — can map models onto existing databases, including already use workplace. means can layer oRm top production databases build admin dashboards, internal Shiny tools, one-data fixers confidence. relationships defined, can traverse complex data structures just easily. Users logs, organizations memberships, plants mesaurements.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/with_shiny.html","id":"form-inputs","dir":"Articles","previous_headings":"","what":"Form Inputs","title":"oRm with Shiny","text":"Let’s imagine simple shiny app allows team members add observations database. ’ll demonstrate observeEvent handler creates new observation database button clicked. demonstration purposes, ’ll consdier data plant heights team members represented IDs. simple application, can quickly achieve CRUD functionality. However, full-featured application, sophisticated features like validation error handling necessary. allow logic implemented might want take advantage database transaction state. , take look .Engine section document.","code":"# in global.R ===== engine <- Engine$new(   drv = RSQLite::SQLite(),   dbname = \":memory:\",   persist = TRUE  # Optional for in-memory databases )  Observations <- engine$model(     \"observations\",     observer_id = Column('Integer', primary_key = TRUE),     plant_subject_id = Column('Integer'),     plant_height = Column('Numeric', nullable = FALSE) ) # =====  # in server.R ===== observeEvent(input$add_observation, {     # observer_id and plant_height are the values from the form inputs     observation = Observations$new(         observer_id = input$observer_id,         plant_subject_id = input$plant_subject_id,         plant_height = input$plant_height     )     observation$create()     showNotification(\"Observation added!\") })"},{"path":"https://kent-orr.github.io/oRm/articles/with_shiny.html","id":"paging-results","dir":"Articles","previous_headings":"","what":"Paging Results","title":"oRm with Shiny","text":"Large tables need broken browser may tank. Paging good way handle . Popular table packages like DT reactable provide built-support pagination, want implement something like carousel card elements, sets plots? enable pagination application, ’ll need modify query limit number results returned also include LIMIT OFFSET clause. Let’s say want display observations cards uiOutput, want show last 5 cards.","code":"displayed_observations <- reactive({     page_no = input$page_no     offset = (page_no - 1) * 5  # Assuming 5 observations per page      observations = Observations$read(         .order_by = list(desc(observer_id)),          .limit = 5,          .offset = offset         )          return(observations) })  output$observation_cards <- renderUI({     observations = displayed_observations()     tagList(         lapply(observations, function(observation) {             card(                 card_title(paste(\"Plant ID:\", observation$data$plant_subject_id)),                 card_body(                     paste(\"Observer ID:\", observation$data$observer_id),                     paste(\"Plant Height:\", observation$data$plant_height)                     )             )         })     ) })"},{"path":"https://kent-orr.github.io/oRm/articles/with_shiny.html","id":"dropdowns-and-filters","dir":"Articles","previous_headings":"","what":"Dropdowns and Filters","title":"oRm with Shiny","text":"Inevitably shiny applications need dynamically created dropdown users can select . oRm can help manage lookup tables oop manner instead using SQL queries directly.","code":"Users <- engine$model(     \"users\",     user_id = Column('Integer', primary_key = TRUE),     user_name = Column('String', nullable = FALSE) )  observeEvent(input$check_options, {      users = Users$read()     choices = setNames(         sapply(users, function(user) user$data$user_id),         sapply(users, function(user) user$data$user_name)     )      updateSelectInput(session, \"user_id\", choices = choices)  })"},{"path":"https://kent-orr.github.io/oRm/articles/with_shiny.html","id":"with-engine-for-transaction-management","dir":"Articles","previous_headings":"","what":"With.Engine() for Transaction Management","title":"oRm with Shiny","text":".Engine() function provides robust transaction management database operations. automatically begins transaction, executes code, either commits rolls back transaction based outcome. particularly valuable Shiny applications need ensure data integrity across multiple database operations.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/with_shiny.html","id":"key-features","dir":"Articles","previous_headings":"With.Engine() for Transaction Management","what":"Key Features:","title":"oRm with Shiny","text":"Automatic Transaction Management: Begins commits transactions automatically Error Handling: Automatically rolls back errors prevent partial updates Manual Control: Allows explicit commit() rollback() calls within transaction block Atomicity: Ensures operations succeed none ","code":""},{"path":"https://kent-orr.github.io/oRm/articles/with_shiny.html","id":"basic-usage-in-shiny","dir":"Articles","previous_headings":"With.Engine() for Transaction Management","what":"Basic Usage in Shiny:","title":"oRm with Shiny","text":"","code":"observeEvent(input$add_observation, {     # observer_id and plant_height are the values from the form inputs      with(engine, {         observation = Observations$new(             observer_id = input$observer_id,             plant_subject_id = input$plant_subject_id,             plant_height = input$plant_height         )         observation$create()         # All changes are automatically committed if no errors occur     })          showNotification(\"Observation added!\") })"},{"path":"https://kent-orr.github.io/oRm/articles/with_shiny.html","id":"flushing-data-for-immediate-feedback","dir":"Articles","previous_headings":"","what":"Flushing Data for Immediate Feedback","title":"oRm with Shiny","text":"working databases Shiny applications, often need retrieve server-generated values (like auto-increment IDs) immediately creating records. flush_record parameter create() method enables functionality, allowing access values committing transaction.","code":""},{"path":"https://kent-orr.github.io/oRm/articles/with_shiny.html","id":"how-flushing-works","dir":"Articles","previous_headings":"Flushing Data for Immediate Feedback","what":"How Flushing Works:","title":"oRm with Shiny","text":"create(flush_record = TRUE) call performs insert operation returns server-generated values values immediately available record’s data property can use values update UI elements subsequent operations Different database dialects handle differently, oRm abstracts differences","code":""},{"path":"https://kent-orr.github.io/oRm/articles/with_shiny.html","id":"example-with-auto-incrementing-ids","dir":"Articles","previous_headings":"Flushing Data for Immediate Feedback","what":"Example with Auto-incrementing IDs:","title":"oRm with Shiny","text":"","code":"# Setup a model with an auto-incrementing column Observations <- engine$model(     \"observations\",     id = Column('Serial', primary_key = TRUE),  # Auto-incrementing ID     observer_id = Column('Integer'),     plant_subject_id = Column('Integer'),     plant_height = Column('Numeric', nullable = FALSE),     timestamp = Column('Timestamp', default = function() Sys.time()) )  # Track observation count in a reactive value observation_count <- reactiveVal(0)  observeEvent(input$add_observation, {     with.Engine(engine, {         # Create record with flush_record = TRUE to get the ID immediately         observation <- Observations$record(             observer_id = input$observer_id,             plant_subject_id = input$plant_subject_id,             plant_height = input$plant_height         )                  # This returns the ID immediately, even before commit         observation$create(flush_record = TRUE)                  # Now we can use the ID for UI updates         current_id <- observation$data$id         observation_count(current_id)                  # And for related records         ObservationNotes$record(             observation_id = current_id,             note = input$notes         )$create()     })          # Show feedback with the new observation ID     showNotification(paste(\"Added observation #\", observation_count()))          # Update a plot or table with the new data     output$observation_plot <- renderPlot({         # Plot using the latest observation count         plot_observations(limit = observation_count())     }) })"},{"path":"https://kent-orr.github.io/oRm/articles/with_shiny.html","id":"database-specific-behavior","dir":"Articles","previous_headings":"Flushing Data for Immediate Feedback","what":"Database-Specific Behavior:","title":"oRm with Shiny","text":"Different databases handle returning values differently: PostgreSQL: Uses RETURNING clause fetch values query SQLite: Uses last_insert_rowid() get recent ID MySQL/MariaDB: Uses LAST_INSERT_ID() function oRm handles differences dialect-specific implementations, code remains consistent regardless database backend. Use Flushing: Use flush_record = TRUE need : Display server-generated IDs timestamps users Create related records reference new record’s ID Update reactive UI elements based new record Track progress batch operations approach particularly valuable interactive Shiny applications immediate feedback improves user experience.","code":""},{"path":"https://kent-orr.github.io/oRm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kent Orr. Author, maintainer.","code":""},{"path":"https://kent-orr.github.io/oRm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Orr K (2025). oRm: Lightweight Object-Relational Mapper R. R package version 0.3.1, https://github.com/kent-orr/oRm, https://kent-orr.github.io/oRm/.","code":"@Manual{,   title = {oRm: Lightweight Object-Relational Mapper for R},   author = {Kent Orr},   year = {2025},   note = {R package version 0.3.1, https://github.com/kent-orr/oRm},   url = {https://kent-orr.github.io/oRm/}, }"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"orm-an-object-relational-mapping-orm-framework-for-r","dir":"","previous_headings":"","what":"Lightweight Object-Relational Mapper for R","title":"Lightweight Object-Relational Mapper for R","text":"oRm lightweight ORM R. Define models, insert data, query relationships without writing raw SQL.","code":""},{"path":"https://kent-orr.github.io/oRm/index.html","id":"wrench-installation","dir":"","previous_headings":"","what":"🔧 Installation","title":"Lightweight Object-Relational Mapper for R","text":"","code":"remotes::install_github(\"kent-orr/oRm\")"},{"path":[]},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_1-create-engine","dir":"","previous_headings":"🚀 Quickstart","what":"1. Create Engine","title":"Lightweight Object-Relational Mapper for R","text":"PostgreSQL connections, can set default schema used search_path model() schema supplied:","code":"library(oRm)  engine <- Engine$new(   drv = RSQLite::SQLite(),   dbname = \":memory:\",   persist = TRUE ) engine <- Engine$new(   drv = RPostgres::Postgres(),   dbname = \"mydb\",   .schema = \"custom_schema\" )"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_2-define-models","dir":"","previous_headings":"🚀 Quickstart","what":"2. Define Models","title":"Lightweight Object-Relational Mapper for R","text":"","code":"User <- engine$model(   \"users\",   id = Column(\"INTEGER\", primary_key = TRUE, nullable = FALSE),   organization_id = ForeignKey(\"INTEGER\", references = \"organizations.id\"),   name = Column(\"TEXT\", nullable = FALSE),   age = Column(\"INTEGER\") )  Organization <- engine$model(   \"organizations\",   id = Column(\"INTEGER\", primary_key = TRUE, nullable = FALSE),   name = Column(\"TEXT\", nullable = FALSE) )  Organization$create_table() User$create_table()"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_3-add-relationship","dir":"","previous_headings":"🚀 Quickstart","what":"3. Add Relationship","title":"Lightweight Object-Relational Mapper for R","text":"","code":"User |> define_relationship(   local_key = \"organization_id\",   type = \"belongs_to\",   related_model = Organization,   related_key = \"id\",   ref = \"organization\",   backref = \"users\" )"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_4-insert-records","dir":"","previous_headings":"🚀 Quickstart","what":"4. Insert Records","title":"Lightweight Object-Relational Mapper for R","text":"","code":"Organization$record(id = 1L, name = \"Widgets, Inc\")$create() User$record(id = 1L, organization_id = 1L, name = \"Kent\", age = 34)$create() User$record(id = 2L, organization_id = 1L, name = \"Dylan\", age = 25)$create()"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_5-query-records","dir":"","previous_headings":"🚀 Quickstart","what":"5. Query Records","title":"Lightweight Object-Relational Mapper for R","text":"","code":"kent <- User$read(id == 1, .mode = \"get\") kent$data$name  org <- kent$relationship(\"organization\") org$data$name  org$relationship(\"users\")  # list of user records"},{"path":"https://kent-orr.github.io/oRm/index.html","id":"id_6-crud-api","dir":"","previous_headings":"🚀 Quickstart","what":"6. CRUD API","title":"Lightweight Object-Relational Mapper for R","text":"Early-stage project. Feedback welcome!","code":"u <- User$record(id = 5, name = \"hogan\") u$create() u <- User$read(id == 5) u$data$name <- \"Hogan\" u$update() u$delete()"},{"path":"https://kent-orr.github.io/oRm/reference/Column.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a basic column for a database table — Column","title":"Define a basic column for a database table — Column","text":"Define basic column database table","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a basic column for a database table — Column","text":"","code":"Column(   type,   ...,   default = NULL,   primary_key = NULL,   nullable = NULL,   unique = NULL )"},{"path":"https://kent-orr.github.io/oRm/reference/Column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a basic column for a database table — Column","text":"type SQL data type (e.g. \"INTEGER\", \"TEXT\", \"DATE\") ... Reserved extras like CHECK, COLLATE, etc. default Optional default value. SQL default NULL. Use string literal default, function computed default record generation, unquoted SQL expression via `dbplyr::sql()`. primary_key Logical, whether part primary key. NULL (default) means unspecified. nullable Logical, whether NULLs allowed. NULL (default) means unspecified. unique Logical, whether column UNIQUE constraint. NULL (default) means unspecified.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a basic column for a database table — Column","text":"Column object","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Column.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a basic column for a database table — Column","text":"`primary_key`, `nullable`, `unique` set NULL, behavior left database system's defaults determined higher-level functions. allows flexible column definitions supports composite primary keys.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a basic column for a database table — Column","text":"","code":"# Define a simple integer column id_col <- Column(\"INTEGER\", primary_key = TRUE, nullable = FALSE)  # Define a text column with a default value name_col <- Column(\"TEXT\", default = \"Unnamed\", nullable = FALSE)  # Define a timestamp column with an SQL function default created_col <- Column(\"TIMESTAMP\", default = dbplyr::sql(\"now()\"))  # Define a unique email column email_col <- Column(\"TEXT\", unique = TRUE, nullable = FALSE)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":null,"dir":"Reference","previous_headings":"","what":"Engine Class — Engine","title":"Engine Class — Engine","text":"Engine class core component oRm framework, responsible managing database connections providing methods interacting database. supports direct connections connection pooling, offering flexibility database resources managed. Key features: Manages database connections (single pooled) Provides methods executing SQL queries commands Allows creation TableModel objects ORM operations Supports persistent connections improved performance","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Engine Class — Engine","text":"conn_args list arguments establishing connection conn Active database connection pool use_pool Whether use connection pooling persist Whether keep connections open operations dialect Database dialect use schema Default schema applied tables","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Engine Class — Engine","text":"Engine$new() Engine$get_connection() Engine$close() Engine$list_tables() Engine$get_query() Engine$execute() Engine$set_schema() Engine$create_schema() Engine$check_schema_exists() Engine$model() Engine$set_transaction_state() Engine$get_transaction_state() Engine$qualify() Engine$format_tablename() Engine$print() Engine$clone()","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Engine Class — Engine","text":"Create Engine object","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$new(   ...,   conn_args = list(),   .schema = NULL,   use_pool = FALSE,   persist = FALSE )"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":"... Additional arguments passed DBI::dbConnect conn_args list arguments passed DBI::dbConnect .schema Character. default schema apply child TableModel objects use_pool Logical. Whether make use pool package connections engine persist Logical. Whether keep connection open operations (default: FALSE) Get connection database Reapplies configured schema every connection retrieval ensure consistency reconnects.","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$get_connection()"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"DBIConnection object pool object","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-close-","dir":"Reference","previous_headings":"","what":"Method close()","title":"Engine Class — Engine","text":"Close database connection pool","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$close()"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"NULL","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-list-tables-","dir":"Reference","previous_headings":"","what":"Method list_tables()","title":"Engine Class — Engine","text":"List tables database connection","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$list_tables()"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"character vector table names","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-get-query-","dir":"Reference","previous_headings":"","what":"Method get_query()","title":"Engine Class — Engine","text":"Execute SQL query return result data.frame","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$get_query(sql)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":"sql SQL query","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"data.frame","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-execute-","dir":"Reference","previous_headings":"","what":"Method execute()","title":"Engine Class — Engine","text":"Execute SQL query return number rows affected","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$execute(sql)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":"sql SQL query","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"number rows affected","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-set-schema-","dir":"Reference","previous_headings":"","what":"Method set_schema()","title":"Engine Class — Engine","text":"Set default schema engine active connection","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$set_schema(.schema)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":".schema Character. Schema name apply","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"Engine object","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-create-schema-","dir":"Reference","previous_headings":"","what":"Method create_schema()","title":"Engine Class — Engine","text":"Explicitly create schema database","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$create_schema(.schema)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":".schema Character. schema name create","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"TRUE (invisible) schema created/existed","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-check-schema-exists-","dir":"Reference","previous_headings":"","what":"Method check_schema_exists()","title":"Engine Class — Engine","text":"Check schema exists database","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$check_schema_exists(.schema)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":".schema Character. schema name check","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"TRUE schema exists, otherwise FALSE","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-model-","dir":"Reference","previous_headings":"","what":"Method model()","title":"Engine Class — Engine","text":"Create new TableModel object specified table","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$model(   tablename,   ...,   .data = list(),   .schema = NULL,   .default_mode = \"all\" )"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":"tablename Name table ... Additional arguments passed TableModel constructor. Include `Column` objects define table structure. .data named list arguments TableModel constructor. `Column` objects list also define table structure. .schema Character. default schema apply TableModel object .default_mode Character. Default read mode TableModel.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"new TableModel object","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Engine Class — Engine","text":"","code":"\\dontrun{ engine$model(     \"users\",     Column$new(\"id\", \"integer\"),     Column$new(\"name\", \"text\") ) }"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-set-transaction-state-","dir":"Reference","previous_headings":"","what":"Method set_transaction_state()","title":"Engine Class — Engine","text":"Set internal transaction state","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$set_transaction_state(state)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":"state Logical. Indicates transaction active","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"NULL","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-get-transaction-state-","dir":"Reference","previous_headings":"","what":"Method get_transaction_state()","title":"Engine Class — Engine","text":"Retrieve current transaction state","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$get_transaction_state()"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"Logical indicating transaction active","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-qualify-","dir":"Reference","previous_headings":"","what":"Method qualify()","title":"Engine Class — Engine","text":"Qualify table name schema","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$qualify(tablename, .schema = self$schema)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":"tablename Character. Table name qualify .schema Character. Schema name prepend","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"fully qualified table name","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-format-tablename-","dir":"Reference","previous_headings":"","what":"Method format_tablename()","title":"Engine Class — Engine","text":"Quote format schema-qualified table name","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$format_tablename(tablename)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":"tablename Character. Table name format","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"quoted table name","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Engine Class — Engine","text":"Print concise summary engine, including SQL dialect, default schema, connection status.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$print(...)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":"... Unused, present compatibility.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Engine Class — Engine","text":"Engine object, invisibly.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Engine Class — Engine","text":"objects class cloneable method.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Engine Class — Engine","text":"","code":"Engine$clone(deep = FALSE)"},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Engine Class — Engine","text":"deep Whether make deep clone.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Engine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Engine Class — Engine","text":"","code":"## ------------------------------------------------ ## Method `Engine$model` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ engine$model(     \"users\",     Column$new(\"id\", \"integer\"),     Column$new(\"name\", \"text\") ) } # }"},{"path":"https://kent-orr.github.io/oRm/reference/ForeignKey.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a foreign key column — ForeignKey","title":"Define a foreign key column — ForeignKey","text":"Define foreign key column","code":""},{"path":"https://kent-orr.github.io/oRm/reference/ForeignKey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a foreign key column — ForeignKey","text":"","code":"ForeignKey(   type,   ref_table = NULL,   ref_column = NULL,   references = NULL,   on_delete = NULL,   on_update = NULL,   ... )"},{"path":"https://kent-orr.github.io/oRm/reference/ForeignKey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a foreign key column — ForeignKey","text":"type SQL data type (e.g. \"INTEGER\") ref_table Character. Name referenced table. ref_column Character. Name referenced column. Used specifying pieces separately. references \"table.column\" string specifying referenced field. recommended way declare target. on_delete Optional DELETE behavior (e.g. \"CASCADE\") on_update Optional UPDATE behavior ... Reserved extras like CHECK, COLLATE, etc.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/ForeignKey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a foreign key column — ForeignKey","text":"ForeignKey object","code":""},{"path":"https://kent-orr.github.io/oRm/reference/ForeignKey.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a foreign key column — ForeignKey","text":"function creates ForeignKey object, special type Column. inherits properties Column adds foreign key specific attributes. See Column details additional parameters can passed via ....","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/ForeignKey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a foreign key column — ForeignKey","text":"","code":"# Define a foreign key referencing the 'id' column in the 'users' table user_id_fk <- ForeignKey(\"INTEGER\", references = \"users.id\", on_delete = \"CASCADE\")  # Define a nullable foreign key with custom update behavior category_id_fk <- ForeignKey(   \"INTEGER\", references = \"categories.id\",   nullable = TRUE, on_update = \"SET NULL\" )"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":null,"dir":"Reference","previous_headings":"","what":"Record Class — Record","title":"Record Class — Record","text":"Record class represents single row database table. provides methods creating, updating, deleting individual records.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Record Class — Record","text":"Record R6 class works conjunction TableModel class. Record instance corresponds single row database table represented associated TableModel. class provides methods CRUD (Create, Read, Update, Delete) operations individual records.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Record Class — Record","text":"initialize(model, data = list()) Constructor creating new Record instance. create() Inserts record database. update() Updates record database. delete() Deletes record database.","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Record Class — Record","text":"model TableModel object. Represents database table record belongs . data list. Contains data record, column names keys. relationships list. Contains relationships defined record's model.","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Record Class — Record","text":"Record$new() Record$set_schema() Record$create() Record$flush() Record$update() Record$delete() Record$refresh() Record$relationship() Record$print() Record$clone()","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Record Class — Record","text":"Initialize new Record instance.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class — Record","text":"","code":"Record$new(model, ..., .data = list())"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class — Record","text":"model TableModel object representing database table. ... Named arguments corresponding field values record. .data named list field values (alternative ...).","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class — Record","text":"new Record instance.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-set-schema-","dir":"Reference","previous_headings":"","what":"Method set_schema()","title":"Record Class — Record","text":"Update schema underlying model.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class — Record","text":"","code":"Record$set_schema(.schema)"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class — Record","text":".schema Character. New schema name apply.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-create-","dir":"Reference","previous_headings":"","what":"Method create()","title":"Record Class — Record","text":"Insert record database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class — Record","text":"","code":"Record$create(flush_record = NULL)"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class — Record","text":"flush_record Logical flag determining whether call `flush()` insertion. Defaults `NULL`, flushes currently transaction.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class — Record","text":"Invisible NULL","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-flush-","dir":"Reference","previous_headings":"","what":"Method flush()","title":"Record Class — Record","text":"Flush record's data database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class — Record","text":"","code":"Record$flush(commit = NULL)"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class — Record","text":"commit Logical. Whether commit transaction; defaults NULL automatically commit already transaction.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class — Record","text":"Record instance (invisibly).","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"Record Class — Record","text":"Update record database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class — Record","text":"","code":"Record$update(..., .data = list())"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class — Record","text":"... Named arguments corresponding field values update. .data named list field values update (alternative ...).","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class — Record","text":"Record instance (invisibly).","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-delete-","dir":"Reference","previous_headings":"","what":"Method delete()","title":"Record Class — Record","text":"Delete record database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class — Record","text":"","code":"Record$delete()"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class — Record","text":"Invisible NULL","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-refresh-","dir":"Reference","previous_headings":"","what":"Method refresh()","title":"Record Class — Record","text":"Refresh record database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class — Record","text":"","code":"Record$refresh()"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Record Class — Record","text":"Re-fetches record database using primary key, replacing current data relationships. unsaved local changes discarded, error raised record found.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class — Record","text":"Record instance (invisibly).","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-relationship-","dir":"Reference","previous_headings":"","what":"Method relationship()","title":"Record Class — Record","text":"Retrieve related records based defined relationship.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class — Record","text":"","code":"Record$relationship(rel_name, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class — Record","text":"rel_name name relationship query. ... Additional arguments passed related model's read method.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"Record Class — Record","text":"method returns related records based relationship type: - 'one_to_one' 'many_to_one' relationships, returns single Record object NULL. - 'one_to_many' 'many_to_many' relationships, returns list Record objects.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class — Record","text":"single Record, list Records, NULL, depending relationship type.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Record Class — Record","text":"Print concise summary record, including table name field values.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class — Record","text":"","code":"Record$print(...)"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class — Record","text":"... Additional arguments passed print methods.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Record Class — Record","text":"Record object, invisibly.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Record Class — Record","text":"objects class cloneable method.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Class — Record","text":"","code":"Record$clone(deep = FALSE)"},{"path":"https://kent-orr.github.io/oRm/reference/Record.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record Class — Record","text":"deep Whether make deep clone.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Relationship.html","id":null,"dir":"Reference","previous_headings":"","what":"Relationship Class — Relationship","title":"Relationship Class — Relationship","text":"Relationship class represents relationship two models ORM system.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Relationship.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Relationship Class — Relationship","text":"local_model model owns relationship. local_key key local model relates foreign key related model. related_model model related . related_key key related model local_key relates . type type relationship (one_to_one, one_to_many, many_to_many, many_to_one).","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/Relationship.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Relationship Class — Relationship","text":"Relationship$new() Relationship$print() Relationship$clone()","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Relationship.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Relationship Class — Relationship","text":"Create new Relationship object.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Relationship.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relationship Class — Relationship","text":"","code":"Relationship$new(   local_model,   local_key,   type = c(\"one_to_one\", \"one_to_many\", \"many_to_many\", \"many_to_one\"),   related_model,   related_key )"},{"path":"https://kent-orr.github.io/oRm/reference/Relationship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relationship Class — Relationship","text":"local_model model owns relationship. local_key key local model relates foreign key related model. type type relationship. related_model model related . related_key key related model local_key relates .","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Relationship.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Relationship Class — Relationship","text":"Print human-readable representation relationship.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Relationship.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Relationship Class — Relationship","text":"","code":"Relationship$print()"},{"path":"https://kent-orr.github.io/oRm/reference/Relationship.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Relationship Class — Relationship","text":"objects class cloneable method.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/Relationship.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Relationship Class — Relationship","text":"","code":"Relationship$clone(deep = FALSE)"},{"path":"https://kent-orr.github.io/oRm/reference/Relationship.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relationship Class — Relationship","text":"deep Whether make deep clone.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":null,"dir":"Reference","previous_headings":"","what":"TableModel Class — TableModel","title":"TableModel Class — TableModel","text":"TableModel class represents database table oRm framework. manages table structure, fields, relationships, provides methods interacting database table.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TableModel Class — TableModel","text":"TableModel core component oRm framework, responsible : Defining table structure columns relationships Creating managing database tables Providing interface CRUD operations table records Managing relationships different tables Key features: Dynamic table creation management Support various column types constraints Relationship definitions querying Record creation retrieval","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"TableModel Class — TableModel","text":"Errors table's schema exist.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"TableModel Class — TableModel","text":"initialize(tablename, engine, ..., .data = list(), .schema = NULL, .default_mode = \"\") Constructor creating new TableModel instance. get_connection() Retrieve active database connection engine. generate_sql_fields() Generate SQL field definitions table creation. create_table(if_not_exists = TRUE, overwrite = FALSE, verbose = FALSE) Create associated table database. record(..., .data = list()) Create new Record object associated model. read(..., .mode = NULL, .limit = NULL) Read records table using dynamic filters. `.mode` NULL, uses `default_mode`. relationship(rel_name, ...) Query related records based defined relationships. print() Print concise summary model, including fields.","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"TableModel Class — TableModel","text":"tablename Fully qualified name table database. schema Schema namespaces table; defaults engine's schema. engine Engine instance providing connections SQL dialect. fields Named list Column objects defining table structure. relationships Named list Relationship objects linking models. default_mode Default mode reading records `.mode` NULL.","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"TableModel Class — TableModel","text":"TableModel$new() TableModel$get_connection() TableModel$set_schema() TableModel$create_table() TableModel$drop_table() TableModel$record() TableModel$tbl() TableModel$read() TableModel$relationship() TableModel$print() TableModel$clone()","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"TableModel Class — TableModel","text":"Constructor new TableModel.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class — TableModel","text":"","code":"TableModel$new(   tablename,   engine,   ...,   .data = list(),   .schema = NULL,   .default_mode = c(\"all\", \"one_or_none\", \"get\", \"data.frame\", \"tbl\") )"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class — TableModel","text":"tablename name database table. engine Engine object database connection. ... Column definitions. .data list Column defintions .schema Character. Schema apply table name. Defaults engine's schema. .default_mode Character. Default mode used `read()` called `.mode` = NULL. Must one \"\", \"one_or_none\", \"get\", \"data.frame\", \"tbl\".","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-get-connection-","dir":"Reference","previous_headings":"","what":"Method get_connection()","title":"TableModel Class — TableModel","text":"Retrieve active database connection engine. Delegates associated engine respects schema pooling settings.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class — TableModel","text":"","code":"TableModel$get_connection(...)"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class — TableModel","text":"... Additional arguments passed engine's `get_connection` method.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-set-schema-","dir":"Reference","previous_headings":"","what":"Method set_schema()","title":"TableModel Class — TableModel","text":"Update schema model re-qualify table name.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class — TableModel","text":"","code":"TableModel$set_schema(.schema)"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class — TableModel","text":".schema Character. New schema name apply.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"TableModel Class — TableModel","text":"TableModel object.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-create-table-","dir":"Reference","previous_headings":"","what":"Method create_table()","title":"TableModel Class — TableModel","text":"Create associated table database.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class — TableModel","text":"","code":"TableModel$create_table(   if_not_exists = TRUE,   overwrite = FALSE,   verbose = FALSE )"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class — TableModel","text":"if_not_exists Logical. TRUE, create table exist. Default TRUE. overwrite Logical. TRUE, drop table exists recreate . Default FALSE. verbose Logical. TRUE, return SQL statement instead executing . Default FALSE.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"TableModel Class — TableModel","text":"TableModel object invisibly.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-drop-table-","dir":"Reference","previous_headings":"","what":"Method drop_table()","title":"TableModel Class — TableModel","text":"Drop associated table database. Prompts confirmation default running interactively.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class — TableModel","text":"","code":"TableModel$drop_table(ask = interactive())"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class — TableModel","text":"ask Logical. TRUE (default interactive sessions), prompts user confirmation dropping table.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"TableModel Class — TableModel","text":"Invisibly returns result `DBI::dbExecute()` table dropped, `NULL` operation canceled skipped.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TableModel Class — TableModel","text":"","code":"\\dontrun{ # Drop the \"users\" table after confirmation User$drop_table()  # Force drop without confirmation User$drop_table(ask = FALSE) }"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-record-","dir":"Reference","previous_headings":"","what":"Method record()","title":"TableModel Class — TableModel","text":"Create new Record object model.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class — TableModel","text":"","code":"TableModel$record(..., .data = list())"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class — TableModel","text":"... Named values initialize record's data. .data named list field values.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-tbl-","dir":"Reference","previous_headings":"","what":"Method tbl()","title":"TableModel Class — TableModel","text":"Generate dbplyr tbl() object consumed model.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class — TableModel","text":"","code":"TableModel$tbl()"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-read-","dir":"Reference","previous_headings":"","what":"Method read()","title":"TableModel Class — TableModel","text":"Read records using dynamic filters return specified mode.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class — TableModel","text":"","code":"TableModel$read(   ...,   .mode = NULL,   .limit = 100,   .offset = 0,   .order_by = list() )"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class — TableModel","text":"... Unquoted expressions filtering. .mode Mode reading records. One \"\", \"one_or_none\", \"get\", \"data.frame\", \"tbl\". NULL, uses `default_mode`. \"data.frame\" returns raw result `dplyr::collect()` rather Record objects. \"tbl\" returns uncollected dbplyr table. .limit Integer. Maximum number records return. Defaults 100. NULL means limit. Positive values return first N records, negative values return last N records. .offset Integer. Offset pagination. Default 0. .order_by Unquoted expressions ordering. Defaults NULL (order). Calls dplyr::arrange() can take multiple args / desc() Retrieve related records based defined relationship.","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class — TableModel","text":"","code":"TableModel$relationship(rel_name, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class — TableModel","text":"rel_name name relationship query. ... Additional arguments passed related model's read method.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"TableModel Class — TableModel","text":"method returns related records based relationship type: - 'belongs_to', 'owns', 'one_to_one', 'many_to_one' relationships, returns single Record object NULL. - 'one_to_many' 'many_to_many' relationships, returns list Record objects. per-record filtering based existing data, use [Record$relationship()], applies additional constraints.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"TableModel Class — TableModel","text":"single Record, list Records, NULL, depending relationship type.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"TableModel Class — TableModel","text":"Print concise summary model, including table name column names.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class — TableModel","text":"","code":"TableModel$print(...)"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class — TableModel","text":"... Unused, present compatibility.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"TableModel Class — TableModel","text":"TableModel object, invisibly.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"TableModel Class — TableModel","text":"objects class cloneable method.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"TableModel Class — TableModel","text":"","code":"TableModel$clone(deep = FALSE)"},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableModel Class — TableModel","text":"deep Whether make deep clone.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/TableModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TableModel Class — TableModel","text":"","code":"## ------------------------------------------------ ## Method `TableModel$drop_table` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # Drop the \"users\" table after confirmation User$drop_table()  # Force drop without confirmation User$drop_table(ask = FALSE) } # }"},{"path":"https://kent-orr.github.io/oRm/reference/add_extras.html","id":null,"dir":"Reference","previous_headings":"","what":"Add extra SQL parts to column definition — add_extras","title":"Add extra SQL parts to column definition — add_extras","text":"internal helper function adds additional SQL fragments list extras column definition.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/add_extras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add extra SQL parts to column definition — add_extras","text":"","code":"add_extras(parts, fields)"},{"path":"https://kent-orr.github.io/oRm/reference/add_extras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add extra SQL parts to column definition — add_extras","text":"parts Character vector existing SQL parts fields List vector additional SQL fragments add","code":""},{"path":"https://kent-orr.github.io/oRm/reference/add_extras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add extra SQL parts to column definition — add_extras","text":"Character vector added SQL parts","code":""},{"path":"https://kent-orr.github.io/oRm/reference/add_part.html","id":null,"dir":"Reference","previous_headings":"","what":"Add conditional SQL parts to column definition — add_part","title":"Add conditional SQL parts to column definition — add_part","text":"internal helper function conditionally adds SQL fragments column definition based field properties.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/add_part.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add conditional SQL parts to column definition — add_part","text":"","code":"add_part(parts, field, true, false = NULL)"},{"path":"https://kent-orr.github.io/oRm/reference/add_part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add conditional SQL parts to column definition — add_part","text":"parts Character vector existing SQL parts field Logical value NULL indicating whether add SQL fragment true Character string add field TRUE false Character string add field FALSE (optional)","code":""},{"path":"https://kent-orr.github.io/oRm/reference/add_part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add conditional SQL parts to column definition — add_part","text":"Character vector potentially added SQL parts","code":""},{"path":"https://kent-orr.github.io/oRm/reference/check_schema_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a schema exists for the current dialect — check_schema_exists.mysql","title":"Check whether a schema exists for the current dialect — check_schema_exists.mysql","text":"Dialects implement schemas return TRUE.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/check_schema_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a schema exists for the current dialect — check_schema_exists.mysql","text":"","code":"check_schema_exists.mysql(x, .schema)  check_schema_exists.postgres(x, .schema)  check_schema_exists(x, .schema)  check_schema_exists.default(x, .schema)  check_schema_exists.sqlite(x, .schema)"},{"path":"https://kent-orr.github.io/oRm/reference/check_schema_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a schema exists for the current dialect — check_schema_exists.mysql","text":"x Engine TableModel instance used dispatch. .schema Character. Name schema check.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/check_schema_exists.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Check whether a schema exists for the current dialect — check_schema_exists.mysql","text":"check_schema_exists.mysql(): Check schema exists MySQL. check_schema_exists.postgres(): Check schema exists PostgreSQL. check_schema_exists.sqlite(): SQLite support schemas; always returns TRUE","code":""},{"path":"https://kent-orr.github.io/oRm/reference/create_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a schema for the current dialect — create_schema.postgres","title":"Create a schema for the current dialect — create_schema.postgres","text":"default, -op. Implement dialect-specific ones needed.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/create_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a schema for the current dialect — create_schema.postgres","text":"","code":"create_schema.postgres(x, .schema)  create_schema(x, .schema)  create_schema.default(x, .schema)  create_schema.sqlite(x, .schema)"},{"path":"https://kent-orr.github.io/oRm/reference/create_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a schema for the current dialect — create_schema.postgres","text":"x Engine TableModel instance used dispatch. .schema Character. Name schema create.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/create_schema.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create a schema for the current dialect — create_schema.postgres","text":"create_schema.postgres(): Create schema PostgreSQL. Suppresses notices schema already exists. create_schema.sqlite(): SQLite support schemas","code":""},{"path":"https://kent-orr.github.io/oRm/reference/define_relationship.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a relationship between two models — define_relationship","title":"Define a relationship between two models — define_relationship","text":"function establishes relationship two models ORM system. creates Relationship object adds local model's relationships. backref specified, also creates reverse relationship related model. uses R6 classes, models modified place need reassigned.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/define_relationship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a relationship between two models — define_relationship","text":"","code":"define_relationship(   local_model,   local_key,   type = c(\"one_to_one\", \"one_to_many\", \"many_to_one\", \"many_to_many\"),   related_model,   related_key,   ref = NULL,   backref = NULL )"},{"path":"https://kent-orr.github.io/oRm/reference/define_relationship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a relationship between two models — define_relationship","text":"local_model model owns relationship. local_key key local model relates foreign key related model. type type relationship. Must one 'one_to_one', 'one_to_many', 'many_to_one', 'many_to_many'. related_model model related . related_key key related model local_key relates . ref name use relationship local model. NULL, defaults lowercase name related model. backref name use reverse relationship related model. NULL, defaults lowercase name local model. FALSE, reverse relationship created.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/define_relationship.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a relationship between two models — define_relationship","text":"Invisibly returns local_model (although model modified place).","code":""},{"path":"https://kent-orr.github.io/oRm/reference/define_relationship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a relationship between two models — define_relationship","text":"","code":"if (FALSE) { # \\dontrun{ # Set up models User <- engine$model(\"users\", id = Column(\"INTEGER\", primary_key = TRUE)) Post <- engine$model(\"posts\",                       id = Column(\"INTEGER\", primary_key = TRUE),                       user_id = Column(\"INTEGER\"))  # Define a one-to-many relationship from User to Post define_relationship(User, \"id\", \"one_to_many\", Post, \"user_id\",                      ref = \"posts\", backref = \"user\")  # Now User has a 'posts' relationship and Post has a 'user' relationship  # Create some sample data user <- User$record(id = 1)$create() post <- Post$record(id = 1, user_id = 1)$create()  # Use the relationships user_posts <- user$relationship('posts') post_user <- post$relationship('user')  print(user_posts)  # Should show the post print(post_user)   # Should show the user } # }"},{"path":"https://kent-orr.github.io/oRm/reference/dispatch_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Dispatch method calls based on dialect — dispatch_method","title":"Dispatch method calls based on dialect — dispatch_method","text":"internal function provides mechanism method dispatch based dialect database engine. looks dialect-specific implementations first, falls back default implementations.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/dispatch_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dispatch method calls based on dialect — dispatch_method","text":"","code":"dispatch_method(x, method, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/dispatch_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dispatch method calls based on dialect — dispatch_method","text":"x object associated dialect (Engine, TableModel, Record) method Character string naming method dispatch ... Additional arguments passed dispatched method","code":""},{"path":"https://kent-orr.github.io/oRm/reference/dispatch_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dispatch method calls based on dialect — dispatch_method","text":"result calling appropriate dialect-specific default method","code":""},{"path":"https://kent-orr.github.io/oRm/reference/execute_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a SQL statement — execute_sql.postgres","title":"Execute a SQL statement — execute_sql.postgres","text":"internal function executes SQL commands using dialect-specific logic.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/execute_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a SQL statement — execute_sql.postgres","text":"","code":"execute_sql.postgres(x, con, sql)  execute_sql(x, con, sql)  execute_sql.default(x, con, sql)"},{"path":"https://kent-orr.github.io/oRm/reference/execute_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a SQL statement — execute_sql.postgres","text":"x oRm object (Engine, TableModel, Record) used dialect dispatch con DBI connection object sql Character string SQL statement execute","code":""},{"path":"https://kent-orr.github.io/oRm/reference/execute_sql.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Execute a SQL statement — execute_sql.postgres","text":"execute_sql.postgres(): Suppress PostgreSQL messages executing SQL commands.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/flush.html","id":null,"dir":"Reference","previous_headings":"","what":"Flush data to database table — flush.mysql","title":"Flush data to database table — flush.mysql","text":"MySQL insert returning last generated ID. Insert row return inserted record using PostgreSQL's RETURNING clause. internal function inserts data database table using dialect-specific logic different database systems. handles actual database write operation Record objects. SQLite implementation","code":""},{"path":"https://kent-orr.github.io/oRm/reference/flush.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flush data to database table — flush.mysql","text":"","code":"# S3 method for class 'mysql' flush(x, table, data, con, commit = TRUE, ...)  # S3 method for class 'postgres' flush(x, table, data, con, commit = TRUE, ...)  flush(x, table, data, con, commit = TRUE, ...)  # Default S3 method flush(x, table, data, con, commit = TRUE, ...)  # S3 method for class 'sqlite' flush(x, table, data, con, commit = TRUE, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/flush.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flush data to database table — flush.mysql","text":"x oRm object (Engine, TableModel, Record) used dialect dispatch table Character string table name data Named list vector data insert con DBI connection object commit Logical indicating whether commit transaction ... Additional arguments passed dialect-specific methods","code":""},{"path":"https://kent-orr.github.io/oRm/reference/flush.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flush data to database table — flush.mysql","text":"Invisible NULL dialect-specific return value","code":""},{"path":"https://kent-orr.github.io/oRm/reference/get_dialect.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the dialect from an oRm object — get_dialect","title":"Get the dialect from an oRm object — get_dialect","text":"internal function extracts database dialect various oRm objects traversing object hierarchy find associated Engine.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/get_dialect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the dialect from an oRm object — get_dialect","text":"","code":"get_dialect(x)"},{"path":"https://kent-orr.github.io/oRm/reference/get_dialect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the dialect from an oRm object — get_dialect","text":"x oRm object (Engine, TableModel, Record)","code":""},{"path":"https://kent-orr.github.io/oRm/reference/get_dialect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the dialect from an oRm object — get_dialect","text":"Character string representing dialect name, \"default\" dialect found","code":""},{"path":"https://kent-orr.github.io/oRm/reference/qualify.html","id":null,"dir":"Reference","previous_headings":"","what":"Qualify table name with schema — qualify.mysql","title":"Qualify table name with schema — qualify.mysql","text":"internal function adds schema qualification table names needed, using dialect-specific logic different database systems.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/qualify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Qualify table name with schema — qualify.mysql","text":"","code":"qualify.mysql(x, tablename, .schema)  qualify.postgres(x, tablename, .schema)  qualify(x, tablename, .schema)  qualify.default(x, tablename, .schema)  qualify.sqlite(x, tablename, .schema)"},{"path":"https://kent-orr.github.io/oRm/reference/qualify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Qualify table name with schema — qualify.mysql","text":"x oRm object (Engine, TableModel, Record) used dialect dispatch tablename Character string table name qualify .schema Character string schema name, NULL","code":""},{"path":"https://kent-orr.github.io/oRm/reference/qualify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Qualify table name with schema — qualify.mysql","text":"Character string qualified table name","code":""},{"path":"https://kent-orr.github.io/oRm/reference/qualify.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Qualify table name with schema — qualify.mysql","text":"qualify.mysql(): MySQL-specific table qualification optional schema. qualify.postgres(): Add schema prefix unqualified table names PostgreSQL. qualify.sqlite(): SQLite ignores schema qualification","code":""},{"path":"https://kent-orr.github.io/oRm/reference/render_constraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Write teh sql for a foreign key column — render_constraint","title":"Write teh sql for a foreign key column — render_constraint","text":"Write teh sql foreign key column","code":""},{"path":"https://kent-orr.github.io/oRm/reference/render_constraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write teh sql for a foreign key column — render_constraint","text":"","code":"render_constraint(field, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/render_constraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write teh sql for a foreign key column — render_constraint","text":"field Column object ... Ignored","code":""},{"path":"https://kent-orr.github.io/oRm/reference/render_field.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Write the sql for creating a sql column — render_field.default","title":"Write the sql for creating a sql column — render_field.default","text":"Write sql creating sql column","code":""},{"path":"https://kent-orr.github.io/oRm/reference/render_field.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write the sql for creating a sql column — render_field.default","text":"","code":"# Default S3 method render_field(field, conn, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/render_field.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write the sql for creating a sql column — render_field.default","text":"field Column object conn DBI connection object ... Ignored","code":""},{"path":"https://kent-orr.github.io/oRm/reference/render_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a column field to SQL — render_field","title":"Render a column field to SQL — render_field","text":"Render column field SQL","code":""},{"path":"https://kent-orr.github.io/oRm/reference/render_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a column field to SQL — render_field","text":"","code":"render_field(field, conn, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/render_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a column field to SQL — render_field","text":"field Column object conn DBI connection object ... Ignored","code":""},{"path":"https://kent-orr.github.io/oRm/reference/render_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a column field to SQL — render_field","text":"character SQL fragment","code":""},{"path":"https://kent-orr.github.io/oRm/reference/set_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Set schema for database operations — set_schema.mysql","title":"Set schema for database operations — set_schema.mysql","text":"internal function sets schema context database operations, using dialect-specific logic different database systems.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/set_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set schema for database operations — set_schema.mysql","text":"","code":"set_schema.mysql(x, .schema)  set_schema.postgres(x, .schema)  set_schema(x, .schema)  set_schema.default(x, .schema)  set_schema.sqlite(x, .schema)"},{"path":"https://kent-orr.github.io/oRm/reference/set_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set schema for database operations — set_schema.mysql","text":"x oRm object (Engine, TableModel, Record) used dialect dispatch .schema Character string schema name set","code":""},{"path":"https://kent-orr.github.io/oRm/reference/set_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set schema for database operations — set_schema.mysql","text":"Invisible NULL (called side effects)","code":""},{"path":"https://kent-orr.github.io/oRm/reference/set_schema.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Set schema for database operations — set_schema.mysql","text":"set_schema.mysql(): Change active schema using MySQL's USE statement. set_schema.postgres(): PostgreSQL applies schema via search_path. set_schema.sqlite(): SQLite support schemas","code":""},{"path":"https://kent-orr.github.io/oRm/reference/with.Engine.html","id":null,"dir":"Reference","previous_headings":"","what":"Transaction Function — with.Engine","title":"Transaction Function — with.Engine","text":"function allows execute block code within transaction. auto_commit TRUE (default), transaction committed automatically upon successful execution. auto_commit FALSE, must explicitly commit rollback within transaction block.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/with.Engine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transaction Function — with.Engine","text":"","code":"# S3 method for class 'Engine' with(data, expr, auto_commit = TRUE, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/with.Engine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transaction Function — with.Engine","text":"data Engine object manages database connection expr expression evaluated within transaction auto_commit Logical. Whether automatically commit errors occur (default: TRUE) ... Additional arguments (ignored)","code":""},{"path":"https://kent-orr.github.io/oRm/reference/with.Engine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transaction Function — with.Engine","text":"result evaluating expression","code":""},{"path":"https://kent-orr.github.io/oRm/reference/with.Engine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transaction Function — with.Engine","text":"Within transaction block, following special functions available: commit(): Explicitly commits current transaction. calling function,         changes made database within current transaction block. rollback(): Explicitly rolls back (cancels) current transaction. undoes         changes made within transaction block point. auto_commit = TRUE (default), transaction automatically committed block completes without errors. error occurs, transaction automatically rolled back. auto_commit = FALSE, must explicitly call commit() within block save changes. neither commit() rollback() called, transaction rolled back default warning issued.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/with.Engine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transaction Function — with.Engine","text":"","code":"if (FALSE) { # \\dontrun{ # With auto-commit (default) with.Engine(engine, {   User$record(name = \"Alice\")$create()   User$record(name = \"Bob\")$create()   # Transaction automatically committed if no errors })  # With manual commit with.Engine(engine, {   User$record(name = \"Alice\")$create()   User$record(name = \"Bob\")$create()      # Explicitly commit the transaction   commit() }, auto_commit = FALSE)  # With conditional commit/rollback with.Engine(engine, {   User$record(name = \"Alice\")$create()      # Check a condition   if (some_validation_check()) {     User$record(name = \"Bob\")$create()     commit()   } else {     # Discard all changes if validation fails     rollback()   } }, auto_commit = FALSE)  # Error handling with explicit rollback with.Engine(engine, {   tryCatch({     User$record(name = \"Alice\")$create()     # Some operation that might fail     problematic_operation()     commit()   }, error = function(e) {     # Custom error handling     message(\"Operation failed: \", e$message)     rollback()   }) }, auto_commit = FALSE) } # }"},{"path":"https://kent-orr.github.io/oRm/reference/with.Record.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate an expression within a Record's data. — with.Record","title":"Evaluate an expression within a Record's data. — with.Record","text":"Evaluate expression within Record's data.","code":""},{"path":"https://kent-orr.github.io/oRm/reference/with.Record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate an expression within a Record's data. — with.Record","text":"","code":"# S3 method for class 'Record' with(data, expr, ...)"},{"path":"https://kent-orr.github.io/oRm/reference/with.Record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate an expression within a Record's data. — with.Record","text":"data Record object. expr Expression evaluate within record. ... Additional arguments (ignored)","code":""},{"path":"https://kent-orr.github.io/oRm/reference/with.Record.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate an expression within a Record's data. — with.Record","text":"result evaluated expression.","code":""},{"path":[]},{"path":"https://kent-orr.github.io/oRm/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"oRm 0.3.0","text":"Added comprehensive PostgreSQL dialect support RETURNING clause Enhanced schema management automatic schema creation Improved transaction handling .Engine() method Added support connection pooling via pool package","code":""},{"path":"https://kent-orr.github.io/oRm/news/index.html","id":"improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"oRm 0.3.0","text":"Enhanced dialect system better database compatibility Improved error handling validation Better documentation vignettes Added comprehensive test coverage PostgreSQL dialect","code":""},{"path":"https://kent-orr.github.io/oRm/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"oRm 0.3.0","text":"Fixed S3 method signature consistency () methods Improved handling NULL values database operations Fixed documentation issues parameter mismatches","code":""},{"path":"https://kent-orr.github.io/oRm/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"oRm 0.3.0","text":"Updated .Engine() .Record() method signatures S3 consistency initial CRAN submission oRm.","code":""}]
